!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("Algorithms",[],e):"object"==typeof exports?exports.Algorithms=e():t.Algorithms=e()}("undefined"!=typeof self?self:this,function(){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=1)}([function(t,e,r){"use strict";function n(t){this.data=t}function i(t){if(t.length>0){this.head=new n(t[0]);for(var e=this.head,r=1;r<t.length;++r)e.next=new n(t[r]),e=e.next}}i.printRecursion=function(t){return t?i.printRecursion(t.next):null},i.prototype={print:function(){for(var t=this.head;t;)console.log(t.data),t=t.next},toArray:function(){for(var t=[],e=this.head;e;)t.push(e.data),e=e.next;return t},insert:function(t,e){var r=new n(t);if(!this.head)return this.head=r,this;if(0===e){var i=this.head;return this.head=r,this.head.next=i,this}for(var s=this.head,o=1;s.next;){if(void 0!==e&&o===e){var h=s.next;return s.next=r,r.next=h,this}s=s.next,++o}return s.next=r,this},shift:function(){if(!this.head)return null;var t=this.head;return this.head=this.head.next,t.data},pop:function(){if(!this.head)return null;for(var t=this.head,e=null;t.next;)e=t,t=t.next;return e.next=null,t.data},delete:function(t){if(!this.head)return null;if(0===t)return this.head=this.head.next,this;for(var e=this.head,r=0,n=null;e.next;){if(void 0!==t&&r===t)return n.next=e.next,this;n=e,e=e.next,++r}return this},reverse:function(){if(!this.head)return null;for(var t=this.head,e=null;t;){var r=t.next;t.next=e,e=t,t=r}return this.head=e,this},reverseRecursion:function(t){t.next?(this.reverseRecursion(t.next),t.next.next=t,t.next=null):this.head=t}},t.exports={LinkedList:i,Node:n}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"DataStructures",{enumerable:!0,get:function(){return i.default}});var n,i=(n=r(2))&&n.__esModule?n:{default:n}},function(t,e,r){"use strict";t.exports={BinarySearchTree:r(3),linkedLists:r(4),queues:r(6),stacks:r(9)}},function(t,e,r){"use strict";function n(t){this._data=t}function i(t){var e=this;Array.isArray(t)?t.forEach(function(t){return e.insert(t)}):this._root=new n(t)}n.prototype={get data(){return this._data},set data(t){this._data=t},get left(){return this._left},set left(t){t&&t.constructor===Number?this._left=new n(t):this._left=t},get right(){return this._right},set right(t){t&&t.constructor===Number?this._right=new n(t):this._right=t},insert:function(t){this.data?t>this.data?this.right?this.right.insert(t):this.right=t:t<this.data&&(this.left?this.left.insert(t):this.left=t):this.data=t},search:function(t){return this.data?t===this.data?this:t>this.data&&this.right?this.right.search(t):t<this.data&&this.left?this.left.search(t):null:null}},i.prototype={get root(){return this._root},set root(t){this._root=t},insert:function(t){return this.root?this.root.insert(t):this.root=new n(t),this},has:function(t){return!!this.root&&null!==this.root.search(t)},search:function(t){return this.root?this.root.search(t):null},findMin:function(t){if(this.root){var e=function t(e){return e.left?t(e.left):e.data};return e(t||this.root)}},findMax:function(t){if(this.root){var e=function t(e){return e.right?t(e.right):e.data};return e(t||this.root)}},delete:function(t){return function t(e,r){if(e){if(r<e.data)return t(e.left,r);if(r>e.data)return t(e.right,r);if(e.left&&e.right){for(var n=e.right;n.left;)n=n.left;return e.data=n.data,e.right=t(e.right,n.data),e}return e.left||e.right}}(this.root,t),this},levelOrder:function(){var t=[];if(this.root){var e=[];for(e.push(this.root);e.length>0;){var r=e.shift();t.push(r.data),r.left&&e.push(r.left),r.right&&e.push(r.right)}}return t},preOrder:function(){var t=[];return this.root&&function e(r){t.push(r.data),r.left&&e(r.left),r.right&&e(r.right)}(this.root),t},inOrder:function(){var t=[];return this.root&&function e(r){r.left&&e(r.left),t.push(r.data),r.right&&e(r.right)}(this.root),t},postOrder:function(){var t=[];return this.root&&function e(r){r.left&&e(r.left),r.right&&e(r.right),t.push(r.data)}(this.root),t},maxDepth:function(){if(!this.root)return 0;var t=function t(e){return e?Math.max(t(e.left),t(e.right))+1:0};return t(this.root)},isValid:function(){return function t(e,r,n){return!e||!(e.data<=r||e.data>=n)&&t(e.left,r,e.data)&&t(e.right,e.data,n)}(this.root,-1/0,1/0)},pathSum:function(t){return function t(e,r){return!!e&&(r-=e.data,e.left||e.right?t(e.left,r)||t(e.right,r):0===r)}(this.root,t)},isSymmetric:function(){if(!this.root)return!0;return function t(e,r){return e&&r?e.data===r.data&&t(e.left,r.right)&&t(e.right,r.left):e===r}(this.root.left,this.root.right)},getSuccessor:function(t){var e=this.search(t);if(!e)return null;if(void 0!==e.right)return this.findMin(e.right);for(var r=null,n=this.root;n!==e;)e.data<n.data?(r=n,n=n.left):n=n.right;return r.data}},t.exports=i},function(t,e,r){"use strict";var n=r(0).LinkedList;t.exports={DoublyLinkedList:r(5),LinkedList:n}},function(t,e,r){"use strict";var n=r(0),i=n.LinkedList,s=n.Node;function o(t){s.call(this,t)}function h(t){if(t.length>0){this.head=new o(t[0]);for(var e=this.head,r=1;r<t.length;++r){var n=new o(t[r]);n.prev=e,e.next=n,e=e.next}}}h.prototype=Object.create(i.prototype),h.prototype.constructor=h,h.prototype.insert=function(t,e){var r=new s(t);if(!this.head)return this.head=r,this.head;if(0===e){var n=this.head;return this.head=r,this.head.next=n,this.head}for(var i=this.head,o=1;i.next;){if(void 0!==e&&o===e){var h=i.next;return i.next=r,r.prev=i,r.next=h,h.prev=r,this}i=i.next,++o}return i.next=r,r.prev=i,this},h.prototype.shift=function(){if(this.head){var t=this.head;return this.head=t.next,this.head.prev=null,t.data}},h.prototype.delete=function(t){if(!this.head)return null;if(0===t)return this.head=this.head.next,this;for(var e=this.head,r=0,n=null;e.next;){if(void 0!==t&&r===t){var i=e.next;return n.next=i,i.prev=n,this}n=e,e=e.next,++r}return this},h.prototype.reverse=function(){if(!this.head)return null;for(var t=this.head,e=null;t;){var r=t.next;t.next=e,e&&(e.prev=t),e=t,t=r}return this.head=e,this},h.prototype.reverseRecursion=function(){return function t(e){if(e&&e.next){t(e.next);var r=e.next;r.next=e,e.prev=r,e.next=null}}(this.head),this},t.exports=h},function(t,e,r){"use strict";t.exports={QueueArray:r(7),QueueLinkedList:r(8)}},function(t,e,r){"use strict";function n(){this._queue=Array(10).fill(null),this._front=-1,this._rear=-1}n.prototype={enqueue:function(t){(this._rear+1)%this._queue.length!==this._front&&(this.isEmpty()?this._rear=this._front=0:this._rear=(this._rear+1)%this._queue.length,this._queue[this._rear]=t)},dequeue:function(){var t;if(!this.isEmpty())return this._front===this._rear?(t=this._queue[this._front],this._front=this._rear=-1):(t=this._queue[this._front],++this._front),t},front:function(){return this._queue[this._front]},isEmpty:function(){return-1===this._front&&-1===this._rear}},t.exports=n},function(t,e,r){"use strict";function n(t){this.data=t}function i(){}i.prototype={enqueue:function(t){this.isEmpty()?this._rear=this._front=new n(t):this._rear=this._rear.next=new n(t)},dequeue:function(){var t=this._front;return t===this._rear?this._rear=this._front=void 0:t.next&&(this._front=t.next),t.data},front:function(){return this._front.data},isEmpty:function(){return void 0===this._front&&void 0===this._rear}},t.exports=i},function(t,e,r){"use strict";t.exports={StackArray:r(10),StackLinkedList:r(11)}},function(t,e,r){"use strict";function n(){this._stack=[],this._top=-1}n.prototype={push:function(t){return++this._top,this._stack.length>=this._top+1?this._stack[this._top]=t:this._stack.push(t),this._stack},pop:function(){if(!this.isEmpty()){var t=this._stack[this._top];return this._stack[this._top]=void 0,--this._top,t}},top:function(){return this._stack[this._top]},isEmpty:function(){return-1===this._top}},t.exports=n},function(t,e){function r(t){this.data=t}function n(){}n.printRecursion=function(t){return t?n.printRecursion(t.next):null},n.prototype={print:function(){for(var t=this.head;t;)console.log(t.data),t=t.next},toArray:function(){for(var t=[],e=this.head;e;)t.push(e.data),e=e.next;return t},push:function(t){var e=new r(t);return e.next=this.head,this.head=e,this},pop:function(){if(!this.head)return null;var t=this.head;return this.head=t.next,t.data},top:function(){return this.head.data},isEmpty:function(){return!this.head},reverse:function(){for(var t=new n;this.head;)t.push(this.shift());for(;!t.isEmpty();)this.insert(t.pop());return this}},t.exports=n}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
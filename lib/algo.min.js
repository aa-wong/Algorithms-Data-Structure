!function(t,r){"object"==typeof exports&&"object"==typeof module?module.exports=r():"function"==typeof define&&define.amd?define("algo",[],r):"object"==typeof exports?exports.algo=r():t.algo=r()}("undefined"!=typeof self?self:this,(function(){return function(t){var r={};function e(n){if(r[n])return r[n].exports;var i=r[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,e),i.l=!0,i.exports}return e.m=t,e.c=r,e.d=function(t,r,n){e.o(t,r)||Object.defineProperty(t,r,{enumerable:!0,get:n})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,r){if(1&r&&(t=e(t)),8&r)return t;if(4&r&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(e.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&r&&"string"!=typeof t)for(var i in t)e.d(n,i,function(r){return t[r]}.bind(null,i));return n},e.n=function(t){var r=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(r,"a",r),r},e.o=function(t,r){return Object.prototype.hasOwnProperty.call(t,r)},e.p="",e(e.s=2)}([function(t,r,e){"use strict";t.exports={QueueArray:e(6),QueueLinkedList:e(7)}},function(t,r,e){"use strict";function n(t){this.data=t}function i(t){if(t.length>0){this.head=new n(t[0]);for(var r=this.head,e=1;e<t.length;++e)r.next=new n(t[e]),r=r.next}}i.printRecursion=function(t){return t?i.printRecursion(t.next):null},i.prototype={print:function(){for(var t=this.head;t;)console.log(t.data),t=t.next},toArray:function(){for(var t=[],r=this.head;r;)t.push(r.data),r=r.next;return t},insert:function(t,r){var e=new n(t);if(!this.head)return this.head=e,this;if(0===r){var i=this.head;return this.head=e,this.head.next=i,this}for(var o=this.head,s=1;o.next;){if(void 0!==r&&s===r){var u=o.next;return o.next=e,e.next=u,this}o=o.next,++s}return o.next=e,this},shift:function(){if(!this.head)return null;var t=this.head;return this.head=this.head.next,t.data},pop:function(){if(!this.head)return null;for(var t=this.head,r=null;t.next;)r=t,t=t.next;return r.next=null,t.data},delete:function(t){if(!this.head)return null;if(0===t)return this.head=this.head.next,this;for(var r=this.head,e=0,n=null;r.next;){if(void 0!==t&&e===t)return n.next=r.next,this;n=r,r=r.next,++e}return this},reverse:function(){if(!this.head)return null;for(var t=this.head,r=null;t;){var e=t.next;t.next=r,r=t,t=e}return this.head=r,this},reverseRecursion:function(t){t.next?(this.reverseRecursion(t.next),t.next.next=t,t.next=null):this.head=t}},t.exports={LinkedList:i,Node:n}},function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),Object.defineProperty(r,"dataStructures",{enumerable:!0,get:function(){return n.default}}),Object.defineProperty(r,"algorithms",{enumerable:!0,get:function(){return i.default}});var n=o(e(3)),i=o(e(13));function o(t){return t&&t.__esModule?t:{default:t}}},function(t,r,e){"use strict";t.exports={BinarySearchTree:e(4),Graph:e(5),linkedLists:e(8),queues:e(0),stacks:e(10)}},function(t,r,e){"use strict";function n(t){this._data=t}function i(t){var r=this;Array.isArray(t)?t.forEach((function(t){return r.insert(t)})):this._root=new n(t)}n.prototype={get data(){return this._data},set data(t){this._data=t},get left(){return this._left},set left(t){t&&t.constructor===Number?this._left=new n(t):this._left=t},get right(){return this._right},set right(t){t&&t.constructor===Number?this._right=new n(t):this._right=t},insert:function(t){this.data?t>this.data?this.right?this.right.insert(t):this.right=t:t<this.data&&(this.left?this.left.insert(t):this.left=t):this.data=t},search:function(t){return this.data?t===this.data?this:t>this.data&&this.right?this.right.search(t):t<this.data&&this.left?this.left.search(t):null:null}},i.prototype={get root(){return this._root},set root(t){this._root=t},insert:function(t){return this.root?this.root.insert(t):this.root=new n(t),this},has:function(t){return!!this.root&&null!==this.root.search(t)},search:function(t){return this.root?this.root.search(t):null},findMin:function(t){if(this.root){var r=function t(r){return r.left?t(r.left):r.data};return r(t||this.root)}},findMax:function(t){if(this.root){var r=function t(r){return r.right?t(r.right):r.data};return r(t||this.root)}},delete:function(t){return function t(r,e){if(r){if(e<r.data)return t(r.left,e);if(e>r.data)return t(r.right,e);if(r.left&&r.right){for(var n=r.right;n.left;)n=n.left;return r.data=n.data,r.right=t(r.right,n.data),r}return r.left||r.right}}(this.root,t),this},levelOrder:function(){var t=[];if(this.root){var r=[];for(r.push(this.root);r.length>0;){var e=r.shift();t.push(e.data),e.left&&r.push(e.left),e.right&&r.push(e.right)}}return t},preOrder:function(){var t=[];return this.root&&function r(e){t.push(e.data),e.left&&r(e.left),e.right&&r(e.right)}(this.root),t},inOrder:function(){var t=[];return this.root&&function r(e){e.left&&r(e.left),t.push(e.data),e.right&&r(e.right)}(this.root),t},postOrder:function(){var t=[];return this.root&&function r(e){e.left&&r(e.left),e.right&&r(e.right),t.push(e.data)}(this.root),t},maxDepth:function(){if(!this.root)return 0;var t=function t(r){return r?Math.max(t(r.left),t(r.right))+1:0};return t(this.root)},isValid:function(){return function t(r,e,n){return!r||!(r.data<=e||r.data>=n)&&(t(r.left,e,r.data)&&t(r.right,r.data,n))}(this.root,-1/0,1/0)},pathSum:function(t){return function t(r,e){return!!r&&(e-=r.data,r.left||r.right?t(r.left,e)||t(r.right,e):0===e)}(this.root,t)},isSymmetric:function(){if(!this.root)return!0;return function t(r,e){return r&&e?r.data===e.data&&(t(r.left,e.right)&&t(r.right,e.left)):r===e}(this.root.left,this.root.right)},getSuccessor:function(t){var r=this.search(t);if(!r)return null;if(void 0!==r.right)return this.findMin(r.right);for(var e=null,n=this.root;n!==r;)r.data<n.data?(e=n,n=n.left):n=n.right;return e.data}},t.exports=i},function(t,r,e){"use strict";var n=e(0).QueueLinkedList;function i(){this.numOfVertices=0,this.list=new Map}i.prototype={addVertex:function(t){return++this.numOfVertices,this.list.set(t,[]),this},addEdge:function(t,r){return this.list.get(t)||this.addVertex(t),this.list.get(t).push(r),this.list.get(r)||this.addVertex(r),this.list.get(r).push(t),this},toObject:function(){var t={};return this.list.forEach((function(r,e){t[e]=r})),t},bfs:function(t){var r=Array(this.numOfVertices).fill(!1),e=new n;for(r[t]=!0,e.enqueue(t);!e.isEmpty();){var i=e.dequeue();this.list.get(i).forEach((function(t){r[t]||(r[t]=!0,e.enqueue(t))}))}},dfs:function(t){}},t.exports=i},function(t,r,e){"use strict";function n(){this._queue=Array(10).fill(null),this._front=-1,this._rear=-1}n.prototype={enqueue:function(t){(this._rear+1)%this._queue.length!==this._front&&(this.isEmpty()?this._rear=this._front=0:this._rear=(this._rear+1)%this._queue.length,this._queue[this._rear]=t)},dequeue:function(){var t;if(!this.isEmpty())return this._front===this._rear?(t=this._queue[this._front],this._front=this._rear=-1):(t=this._queue[this._front],++this._front),t},front:function(){return this._queue[this._front]},isEmpty:function(){return-1===this._front&&-1===this._rear}},t.exports=n},function(t,r,e){"use strict";function n(t){this.data=t}function i(){}i.prototype={enqueue:function(t){this.isEmpty()?this._rear=this._front=new n(t):this._rear=this._rear.next=new n(t)},dequeue:function(){var t=this._front;return t===this._rear?this._rear=this._front=void 0:t.next&&(this._front=t.next),t.data},front:function(){return this._front.data},isEmpty:function(){return void 0===this._front&&void 0===this._rear}},t.exports=i},function(t,r,e){"use strict";var n=e(1).LinkedList;t.exports={DoublyLinkedList:e(9),LinkedList:n}},function(t,r,e){"use strict";var n=e(1),i=n.LinkedList,o=n.Node;function s(t){o.call(this,t)}function u(t){if(t.length>0){this.head=new s(t[0]);for(var r=this.head,e=1;e<t.length;++e){var n=new s(t[e]);n.prev=r,r.next=n,r=r.next}}}u.prototype=Object.create(i.prototype),u.prototype.constructor=u,u.prototype.insert=function(t,r){var e=new o(t);if(!this.head)return this.head=e,this.head;if(0===r){var n=this.head;return this.head=e,this.head.next=n,this.head}for(var i=this.head,s=1;i.next;){if(void 0!==r&&s===r){var u=i.next;return i.next=e,e.prev=i,e.next=u,u.prev=e,this}i=i.next,++s}return i.next=e,e.prev=i,this},u.prototype.shift=function(){if(this.head){var t=this.head;return this.head=t.next,this.head.prev=null,t.data}},u.prototype.delete=function(t){if(!this.head)return null;if(0===t)return this.head=this.head.next,this;for(var r=this.head,e=0,n=null;r.next;){if(void 0!==t&&e===t){var i=r.next;return n.next=i,i.prev=n,this}n=r,r=r.next,++e}return this},u.prototype.reverse=function(){if(!this.head)return null;for(var t=this.head,r=null;t;){var e=t.next;t.next=r,r&&(r.prev=t),r=t,t=e}return this.head=r,this},u.prototype.reverseRecursion=function(){return function t(r){if(r&&r.next){t(r.next);var e=r.next;e.next=r,r.prev=e,r.next=null}}(this.head),this},t.exports=u},function(t,r,e){"use strict";t.exports={StackArray:e(11),StackLinkedList:e(12)}},function(t,r,e){"use strict";function n(){this._stack=[],this._top=-1}n.prototype={push:function(t){return++this._top,this._stack.length>=this._top+1?this._stack[this._top]=t:this._stack.push(t),this._stack},pop:function(){if(!this.isEmpty()){var t=this._stack[this._top];return this._stack[this._top]=void 0,--this._top,t}},top:function(){return this._stack[this._top]},isEmpty:function(){return-1===this._top}},t.exports=n},function(t,r,e){"use strict";function n(t){this.data=t}function i(){}i.printRecursion=function(t){return t?i.printRecursion(t.next):null},i.prototype={print:function(){for(var t=this.head;t;)console.log(t.data),t=t.next},toArray:function(){for(var t=[],r=this.head;r;)t.push(r.data),r=r.next;return t},push:function(t){var r=new n(t);return r.next=this.head,this.head=r,this},pop:function(){if(!this.head)return null;var t=this.head;return this.head=t.next,t.data},top:function(){return this.head.data},isEmpty:function(){return!this.head},reverse:function(){for(var t=new i;this.head;)t.push(this.shift());for(;!t.isEmpty();)this.insert(t.pop());return this}},t.exports=i},function(t,r,e){"use strict";t.exports={sorting:e(14),search:e(21)}},function(t,r,e){"use strict";t.exports={bubbleSort:e(15),heapSort:e(16),insertionSort:e(17),mergeSort:e(18),quickSort:e(19),selectionSort:e(20)}},function(t,r,e){"use strict";t.exports=function(t){for(var r=t.length-1;r>=0;--r)for(var e=!1,n=0;n<r-1;++n){if(t[n]>t[n+1]){var i=t[n];t[n]=t[n+1],t[n+1]=i,e=!0}if(!e)break}return t}},function(t,r){function e(t){return function(t){if(Array.isArray(t))return n(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,r){if(!t)return;if("string"==typeof t)return n(t,r);var e=Object.prototype.toString.call(t).slice(8,-1);"Object"===e&&t.constructor&&(e=t.constructor.name);if("Map"===e||"Set"===e)return Array.from(t);if("Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return n(t,r)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function n(t,r){(null==r||r>t.length)&&(r=t.length);for(var e=0,n=new Array(r);e<r;e++)n[e]=t[e];return n}t.exports=function(t){for(var r=[].concat(e(t)),n=r.length,i=function(t,e){var n=r[t];r[t]=r[e],r[e]=n},o=function t(r,e){var o=2*e+1,s=2*e+2,u=e;o<n&&r[o]>r[u]&&(u=o),s<n&&r[s]>r[u]&&(u=s),u!==e&&(i(u,e),t(r,u))},s=Math.floor(n/2);s>=0;s-=1)o(r,s);for(var u=r.length-1;u>0;u--)i(0,u),n--,o(r,0);return r}},function(t,r,e){"use strict";t.exports=function(t){for(var r=1;r<t.length;++r){for(var e=t[r],n=r;n>0&&t[n-1]>e;)t[n]=t[n-1],--n;t[n]=e}return t}},function(t,r,e){"use strict";t.exports=function t(r){if(r.length<=1)return r;var e=Math.floor(r.length/2),n=r.slice(0,e),i=r.slice(e);return function(t,r){for(var e=[],n=0,i=0;n<t.length&&i<r.length;)t[n]<r[i]?(e.push(t[n]),++n):(e.push(r[i]),++i);return e.concat(t.slice(n)).concat(r.slice(i))}(t(n),t(i))}},function(t,r,e){"use strict";t.exports=function(t){var r=function(t,r){var e=t;t=r,r=e};return function t(e,n,i){if(n<i){var o=function(t,e,n){for(var i=t[Math.floor(Math.random()*t.length)],o=e,s=e;s<n-1;++s)t[s]<=i&&(r(t[s],t[o]),o+=1);return r(t[o],t[n]),o}(e,n,i);t(e,n,o),t(e,o+1,i)}}(t,0,t.length-1),t}},function(t,r,e){"use strict";t.exports=function(t){for(var r=0;r<t.length-1;++r){for(var e=r,n=r+1;n<t.length;++n)t[e]<t[n]&&(e=n);var i=t[r];t[r]=t[e],t[e]=i}return t}},function(t,r,e){"use strict";t.exports={binarySearch:e(22)}},function(t,r,e){"use strict";t.exports=function t(r,e){var n=Math.floor(r.length/2);if(r.length>1){if(e>r[n])return t(r.splice(n),e);if(e<r[n])return t(r.splice(0,n),e)}return e===r[n]?r[n]:null}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
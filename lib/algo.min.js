!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("algo",[],e):"object"==typeof exports?exports.algo=e():t.algo=e()}("undefined"!=typeof self?self:this,(function(){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=2)}([function(t,e,r){"use strict";t.exports={QueueArray:r(6),QueueLinkedList:r(7)}},function(t,e,r){"use strict";function n(t){this.data=t}function i(t){if(t.length>0){this.head=new n(t[0]);for(var e=this.head,r=1;r<t.length;++r)e.next=new n(t[r]),e=e.next}}i.printRecursion=function(t){return t?i.printRecursion(t.next):null},i.prototype={print:function(){for(var t=this.head;t;)console.log(t.data),t=t.next},toArray:function(){for(var t=[],e=this.head;e;)t.push(e.data),e=e.next;return t},insert:function(t,e){var r=new n(t);if(!this.head)return this.head=r,this;if(0===e){var i=this.head;return this.head=r,this.head.next=i,this}for(var s=this.head,o=1;s.next;){if(void 0!==e&&o===e){var u=s.next;return s.next=r,r.next=u,this}s=s.next,++o}return s.next=r,this},shift:function(){if(!this.head)return null;var t=this.head;return this.head=this.head.next,t.data},pop:function(){if(!this.head)return null;for(var t=this.head,e=null;t.next;)e=t,t=t.next;return e.next=null,t.data},delete:function(t){if(!this.head)return null;if(0===t)return this.head=this.head.next,this;for(var e=this.head,r=0,n=null;e.next;){if(void 0!==t&&r===t)return n.next=e.next,this;n=e,e=e.next,++r}return this},reverse:function(){if(!this.head)return null;for(var t=this.head,e=null;t;){var r=t.next;t.next=e,e=t,t=r}return this.head=e,this},reverseRecursion:function(t){t.next?(this.reverseRecursion(t.next),t.next.next=t,t.next=null):this.head=t}},t.exports={LinkedList:i,Node:n}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"dataStructures",{enumerable:!0,get:function(){return n.default}}),Object.defineProperty(e,"algorithms",{enumerable:!0,get:function(){return i.default}});var n=s(r(3)),i=s(r(13));function s(t){return t&&t.__esModule?t:{default:t}}},function(t,e,r){"use strict";t.exports={BinarySearchTree:r(4),Graph:r(5),linkedLists:r(8),queues:r(0),stacks:r(10)}},function(t,e,r){"use strict";function n(t){this._data=t}function i(t){var e=this;Array.isArray(t)?t.forEach((function(t){return e.insert(t)})):this._root=new n(t)}n.prototype={get data(){return this._data},set data(t){this._data=t},get left(){return this._left},set left(t){t&&t.constructor===Number?this._left=new n(t):this._left=t},get right(){return this._right},set right(t){t&&t.constructor===Number?this._right=new n(t):this._right=t},insert:function(t){this.data?t>this.data?this.right?this.right.insert(t):this.right=t:t<this.data&&(this.left?this.left.insert(t):this.left=t):this.data=t},search:function(t){return this.data?t===this.data?this:t>this.data&&this.right?this.right.search(t):t<this.data&&this.left?this.left.search(t):null:null}},i.prototype={get root(){return this._root},set root(t){this._root=t},insert:function(t){return this.root?this.root.insert(t):this.root=new n(t),this},has:function(t){return!!this.root&&null!==this.root.search(t)},search:function(t){return this.root?this.root.search(t):null},findMin:function(t){if(this.root){var e=function t(e){return e.left?t(e.left):e.data};return e(t||this.root)}},findMax:function(t){if(this.root){var e=function t(e){return e.right?t(e.right):e.data};return e(t||this.root)}},delete:function(t){return function t(e,r){if(e){if(r<e.data)return t(e.left,r);if(r>e.data)return t(e.right,r);if(e.left&&e.right){for(var n=e.right;n.left;)n=n.left;return e.data=n.data,e.right=t(e.right,n.data),e}return e.left||e.right}}(this.root,t),this},levelOrder:function(){var t=[];if(this.root){var e=[];for(e.push(this.root);e.length>0;){var r=e.shift();t.push(r.data),r.left&&e.push(r.left),r.right&&e.push(r.right)}}return t},preOrder:function(){var t=[];return this.root&&function e(r){t.push(r.data),r.left&&e(r.left),r.right&&e(r.right)}(this.root),t},inOrder:function(){var t=[];return this.root&&function e(r){r.left&&e(r.left),t.push(r.data),r.right&&e(r.right)}(this.root),t},postOrder:function(){var t=[];return this.root&&function e(r){r.left&&e(r.left),r.right&&e(r.right),t.push(r.data)}(this.root),t},maxDepth:function(){if(!this.root)return 0;var t=function t(e){return e?Math.max(t(e.left),t(e.right))+1:0};return t(this.root)},isValid:function(){return function t(e,r,n){return!e||!(e.data<=r||e.data>=n)&&(t(e.left,r,e.data)&&t(e.right,e.data,n))}(this.root,-1/0,1/0)},pathSum:function(t){return function t(e,r){return!!e&&(r-=e.data,e.left||e.right?t(e.left,r)||t(e.right,r):0===r)}(this.root,t)},isSymmetric:function(){if(!this.root)return!0;return function t(e,r){return e&&r?e.data===r.data&&(t(e.left,r.right)&&t(e.right,r.left)):e===r}(this.root.left,this.root.right)},getSuccessor:function(t){var e=this.search(t);if(!e)return null;if(void 0!==e.right)return this.findMin(e.right);for(var r=null,n=this.root;n!==e;)e.data<n.data?(r=n,n=n.left):n=n.right;return r.data}},t.exports=i},function(t,e,r){"use strict";var n=r(0).QueueLinkedList;function i(){this.numOfVertices=0,this.list=new Map}i.prototype={addVertex:function(t){return++this.numOfVertices,this.list.set(t,[]),this},addEdge:function(t,e){return this.list.get(t)||this.addVertex(t),this.list.get(t).push(e),this.list.get(e)||this.addVertex(e),this.list.get(e).push(t),this},toObject:function(){var t={};return this.list.forEach((function(e,r){t[r]=e})),t},bfs:function(t){var e=Array(this.numOfVertices).fill(!1),r=new n;for(e[t]=!0,r.enqueue(t);!r.isEmpty();){var i=r.dequeue();this.list.get(i).forEach((function(t){e[t]||(e[t]=!0,r.enqueue(t))}))}},dfs:function(t){}},t.exports=i},function(t,e,r){"use strict";function n(){this._queue=Array(10).fill(null),this._front=-1,this._rear=-1}n.prototype={enqueue:function(t){(this._rear+1)%this._queue.length!==this._front&&(this.isEmpty()?this._rear=this._front=0:this._rear=(this._rear+1)%this._queue.length,this._queue[this._rear]=t)},dequeue:function(){var t;if(!this.isEmpty())return this._front===this._rear?(t=this._queue[this._front],this._front=this._rear=-1):(t=this._queue[this._front],++this._front),t},front:function(){return this._queue[this._front]},isEmpty:function(){return-1===this._front&&-1===this._rear}},t.exports=n},function(t,e,r){"use strict";function n(t){this.data=t}function i(){}i.prototype={enqueue:function(t){this.isEmpty()?this._rear=this._front=new n(t):this._rear=this._rear.next=new n(t)},dequeue:function(){var t=this._front;return t===this._rear?this._rear=this._front=void 0:t.next&&(this._front=t.next),t.data},front:function(){return this._front.data},isEmpty:function(){return void 0===this._front&&void 0===this._rear}},t.exports=i},function(t,e,r){"use strict";var n=r(1).LinkedList;t.exports={DoublyLinkedList:r(9),LinkedList:n}},function(t,e,r){"use strict";var n=r(1),i=n.LinkedList,s=n.Node;function o(t){s.call(this,t)}function u(t){if(t.length>0){this.head=new o(t[0]);for(var e=this.head,r=1;r<t.length;++r){var n=new o(t[r]);n.prev=e,e.next=n,e=e.next}}}u.prototype=Object.create(i.prototype),u.prototype.constructor=u,u.prototype.insert=function(t,e){var r=new s(t);if(!this.head)return this.head=r,this.head;if(0===e){var n=this.head;return this.head=r,this.head.next=n,this.head}for(var i=this.head,o=1;i.next;){if(void 0!==e&&o===e){var u=i.next;return i.next=r,r.prev=i,r.next=u,u.prev=r,this}i=i.next,++o}return i.next=r,r.prev=i,this},u.prototype.shift=function(){if(this.head){var t=this.head;return this.head=t.next,this.head.prev=null,t.data}},u.prototype.delete=function(t){if(!this.head)return null;if(0===t)return this.head=this.head.next,this;for(var e=this.head,r=0,n=null;e.next;){if(void 0!==t&&r===t){var i=e.next;return n.next=i,i.prev=n,this}n=e,e=e.next,++r}return this},u.prototype.reverse=function(){if(!this.head)return null;for(var t=this.head,e=null;t;){var r=t.next;t.next=e,e&&(e.prev=t),e=t,t=r}return this.head=e,this},u.prototype.reverseRecursion=function(){return function t(e){if(e&&e.next){t(e.next);var r=e.next;r.next=e,e.prev=r,e.next=null}}(this.head),this},t.exports=u},function(t,e,r){"use strict";t.exports={StackArray:r(11),StackLinkedList:r(12)}},function(t,e,r){"use strict";function n(){this._stack=[],this._top=-1}n.prototype={push:function(t){return++this._top,this._stack.length>=this._top+1?this._stack[this._top]=t:this._stack.push(t),this._stack},pop:function(){if(!this.isEmpty()){var t=this._stack[this._top];return this._stack[this._top]=void 0,--this._top,t}},top:function(){return this._stack[this._top]},isEmpty:function(){return-1===this._top}},t.exports=n},function(t,e,r){"use strict";function n(t){this.data=t}function i(){}i.printRecursion=function(t){return t?i.printRecursion(t.next):null},i.prototype={print:function(){for(var t=this.head;t;)console.log(t.data),t=t.next},toArray:function(){for(var t=[],e=this.head;e;)t.push(e.data),e=e.next;return t},push:function(t){var e=new n(t);return e.next=this.head,this.head=e,this},pop:function(){if(!this.head)return null;var t=this.head;return this.head=t.next,t.data},top:function(){return this.head.data},isEmpty:function(){return!this.head},reverse:function(){for(var t=new i;this.head;)t.push(this.shift());for(;!t.isEmpty();)this.insert(t.pop());return this}},t.exports=i},function(t,e,r){"use strict";t.exports={sorting:r(14)}},function(t,e,r){"use strict";t.exports={selectionSort:r(15),bubbleSort:r(16),insertionSort:r(17),mergeSort:r(18),quickSort:r(19)}},function(t,e,r){"use strict";t.exports=function(t){for(var e=0;e<t.length-1;++e){for(var r=e,n=e+1;n<t.length;++n)t[r]<t[n]&&(r=n);var i=t[e];t[e]=t[r],t[r]=i}return t}},function(t,e,r){"use strict";t.exports=function(t){for(var e=t.length-1;e>=0;--e)for(var r=!1,n=0;n<e-1;++n){if(t[n]>t[n+1]){var i=t[n];t[n]=t[n+1],t[n+1]=i,r=!0}if(!r)break}return t}},function(t,e,r){"use strict";t.exports=function(t){for(var e=1;e<t.length;++e){for(var r=t[e],n=e;n>0&&t[n-1]>r;)t[n]=t[n-1],--n;t[n]=r}return t}},function(t,e,r){"use strict";t.exports=function t(e){if(e.length<=1)return e;var r=Math.floor(e.length/2),n=e.slice(0,r),i=e.slice(r);return function(t,e){for(var r=[],n=0,i=0;n<t.length&&i<e.length;)t[n]<e[i]?(r.push(t[n]),++n):(r.push(e[i]),++i);return r.concat(t.slice(n)).concat(e.slice(i))}(t(n),t(i))}},function(t,e,r){"use strict";t.exports=function(t){var e=function(t,e){var r=t;t=e,e=r};return function t(r,n,i){if(n<i){var s=function(t,r,n){for(var i=t[Math.floor(Math.random()*t.length)],s=r,o=r;o<n-1;++o)t[o]<=i&&(e(t[o],t[s]),s+=1);return e(t[s],t[n]),s}(r,n,i);t(r,n,s),t(r,s+1,i)}}(t,0,t.length-1),t}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbGdvL3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9hbGdvL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2FsZ28vLi9zcmMvZGF0YS1zdHJ1Y3R1cmVzL3F1ZXVlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9hbGdvLy4vc3JjL2RhdGEtc3RydWN0dXJlcy9saW5rZWQtbGlzdHMvbGlua2VkLWxpc3QuanMiLCJ3ZWJwYWNrOi8vYWxnby8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly9hbGdvLy4vc3JjL2RhdGEtc3RydWN0dXJlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9hbGdvLy4vc3JjL2RhdGEtc3RydWN0dXJlcy9iaW5hcnktc2VhcmNoLXRyZWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYWxnby8uL3NyYy9kYXRhLXN0cnVjdHVyZXMvZ3JhcGgvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYWxnby8uL3NyYy9kYXRhLXN0cnVjdHVyZXMvcXVldWVzL2FycmF5LmpzIiwid2VicGFjazovL2FsZ28vLi9zcmMvZGF0YS1zdHJ1Y3R1cmVzL3F1ZXVlcy9saW5rZWQtbGlzdC5qcyIsIndlYnBhY2s6Ly9hbGdvLy4vc3JjL2RhdGEtc3RydWN0dXJlcy9saW5rZWQtbGlzdHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYWxnby8uL3NyYy9kYXRhLXN0cnVjdHVyZXMvbGlua2VkLWxpc3RzL2RvdWJseS1saW5rZWQtbGlzdC5qcyIsIndlYnBhY2s6Ly9hbGdvLy4vc3JjL2RhdGEtc3RydWN0dXJlcy9zdGFja3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYWxnby8uL3NyYy9kYXRhLXN0cnVjdHVyZXMvc3RhY2tzL2FycmF5LmpzIiwid2VicGFjazovL2FsZ28vLi9zcmMvZGF0YS1zdHJ1Y3R1cmVzL3N0YWNrcy9saW5rZWQtbGlzdC5qcyIsIndlYnBhY2s6Ly9hbGdvLy4vc3JjL2FsZ29yaXRobXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYWxnby8uL3NyYy9hbGdvcml0aG1zL3NvcnRpbmcvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYWxnby8uL3NyYy9hbGdvcml0aG1zL3NvcnRpbmcvc2VsZWN0aW9uLmpzIiwid2VicGFjazovL2FsZ28vLi9zcmMvYWxnb3JpdGhtcy9zb3J0aW5nL2J1YmJsZS5qcyIsIndlYnBhY2s6Ly9hbGdvLy4vc3JjL2FsZ29yaXRobXMvc29ydGluZy9pbnNlcnRpb24uanMiLCJ3ZWJwYWNrOi8vYWxnby8uL3NyYy9hbGdvcml0aG1zL3NvcnRpbmcvbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vYWxnby8uL3NyYy9hbGdvcml0aG1zL3NvcnRpbmcvcXVpY2suanMiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwic2VsZiIsInRoaXMiLCJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiUXVldWVBcnJheSIsInJlcXVpcmUiLCJRdWV1ZUxpbmtlZExpc3QiLCJOb2RlIiwiZGF0YSIsIkxpbmtlZExpc3QiLCJsZW5ndGgiLCJoZWFkIiwiY3VyciIsIm5leHQiLCJwcmludFJlY3Vyc2lvbiIsIm5vZGUiLCJwcmludCIsImNvbnNvbGUiLCJsb2ciLCJ0b0FycmF5IiwiYXJyYXkiLCJwdXNoIiwiaW5zZXJ0IiwiaW5kZXgiLCJuZXdOb2RlIiwidGVtcCIsImN1cnJJbmRleCIsInVuZGVmaW5lZCIsInNoaWZ0IiwiZmlyc3QiLCJwb3AiLCJwcmV2IiwiZGVsZXRlIiwicmV2ZXJzZSIsInJldmVyc2VSZWN1cnNpb24iLCJCaW5hcnlTZWFyY2hUcmVlIiwiR3JhcGgiLCJsaW5rZWRMaXN0cyIsInF1ZXVlcyIsInN0YWNrcyIsInZhbCIsIl9kYXRhIiwiQXJyYXkiLCJpc0FycmF5IiwiZm9yRWFjaCIsIl9yb290IiwiX2xlZnQiLCJjb25zdHJ1Y3RvciIsIk51bWJlciIsIl9yaWdodCIsInJpZ2h0IiwibGVmdCIsInNlYXJjaCIsImhhcyIsImZpbmRNaW4iLCJnZXRNaW4iLCJmaW5kTWF4IiwiZ2V0TWF4IiwiZGVsZXRlTm9kZSIsImxldmVsT3JkZXIiLCJ2YWxzIiwicXVldWUiLCJwcmVPcmRlciIsInRyYXZlcnNlIiwiaW5PcmRlciIsInBvc3RPcmRlciIsIm1heERlcHRoIiwiTWF0aCIsIm1heCIsImlzVmFsaWQiLCJpc0JTVCIsIm1pbiIsIkluZmluaXR5IiwicGF0aFN1bSIsInN1bSIsImhhc1BhdGhTdW0iLCJpc1N5bW1ldHJpYyIsInZhbGlkYXRlU3ltbWV0cnkiLCJnZXRTdWNjZXNzb3IiLCJzdWNjZXNzb3IiLCJhbmNlc3RvciIsIm51bU9mVmVydGljZXMiLCJsaXN0IiwiTWFwIiwiYWRkVmVydGV4IiwidiIsInNldCIsImFkZEVkZ2UiLCJ3IiwidG9PYmplY3QiLCJnIiwiYmZzIiwidmlzaXRlZCIsImZpbGwiLCJxIiwiZW5xdWV1ZSIsImlzRW1wdHkiLCJlbGVtIiwiZGVxdWV1ZSIsImRmcyIsIl9xdWV1ZSIsIl9mcm9udCIsIl9yZWFyIiwieCIsImZyb250IiwiUXVldWVMaW5rTGlzdCIsIkRvdWJseUxpbmtlZExpc3QiLCJEb3VibGVOb2RlIiwiU3RhY2tBcnJheSIsIlN0YWNrTGlua2VkTGlzdCIsIl9zdGFjayIsIl90b3AiLCJ0b3AiLCJzdGFjayIsInNvcnRpbmciLCJzZWxlY3Rpb25Tb3J0IiwiYnViYmxlU29ydCIsImluc2VydGlvblNvcnQiLCJtZXJnZVNvcnQiLCJxdWlja1NvcnQiLCJqIiwic3dhcHBlZCIsImgiLCJtaWQiLCJmbG9vciIsInNsaWNlIiwic29ydGVkIiwiY29uY2F0Iiwic29ydEFuZE1lcmdlIiwic3dhcCIsImEiLCJiIiwic3RhcnQiLCJlbmQiLCJwaXZvdCIsInJhbmRvbSIsInBhcnRpdGlvbiJdLCJtYXBwaW5ncyI6IkNBQUEsU0FBMkNBLEVBQU1DLEdBQzFCLGlCQUFaQyxTQUEwQyxpQkFBWEMsT0FDeENBLE9BQU9ELFFBQVVELElBQ1EsbUJBQVhHLFFBQXlCQSxPQUFPQyxJQUM5Q0QsT0FBTyxPQUFRLEdBQUlILEdBQ08saUJBQVpDLFFBQ2RBLFFBQWMsS0FBSUQsSUFFbEJELEVBQVcsS0FBSUMsSUFSakIsQ0FTbUIsb0JBQVRLLEtBQXVCQSxLQUFPQyxNQUFNLFdBQzlDLE8sWUNURSxJQUFJQyxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVUixRQUduQyxJQUFJQyxFQUFTSyxFQUFpQkUsR0FBWSxDQUN6Q0MsRUFBR0QsRUFDSEUsR0FBRyxFQUNIVixRQUFTLElBVVYsT0FOQVcsRUFBUUgsR0FBVUksS0FBS1gsRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU08sR0FHL0ROLEVBQU9TLEdBQUksRUFHSlQsRUFBT0QsUUEwRGYsT0FyREFPLEVBQW9CTSxFQUFJRixFQUd4QkosRUFBb0JPLEVBQUlSLEVBR3hCQyxFQUFvQlEsRUFBSSxTQUFTZixFQUFTZ0IsRUFBTUMsR0FDM0NWLEVBQW9CVyxFQUFFbEIsRUFBU2dCLElBQ2xDRyxPQUFPQyxlQUFlcEIsRUFBU2dCLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVYsRUFBb0JnQixFQUFJLFNBQVN2QixHQUNYLG9CQUFYd0IsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlcEIsRUFBU3dCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FBT0MsZUFBZXBCLEVBQVMsYUFB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TTJFLE1BQU0zSSxJQUlsRDhJLENBQWFWLEVBQVVuRSxHQUFPbUUsRUFBVXBFLE0sNkJDakNqRHRGLEVBQU9ELFFBQVUsU0FBU3lELEdBQ3hCLElBQU02RyxFQUFPLFNBQUNDLEVBQUdDLEdBQ2YsSUFBTTdJLEVBQUk0SSxFQUVWQSxFQUFJQyxFQUNKQSxFQUFJN0ksR0EyQk4sT0FWa0IsU0FBWmlJLEVBQWFuRyxFQUFPZ0gsRUFBT0MsR0FDL0IsR0FBSUQsRUFBUUMsRUFBSyxDQUNmLElBQU1uSSxFQWhCUSxTQUFDa0IsRUFBT2dILEVBQU9DLEdBSS9CLElBSEEsSUFBTUMsRUFBUWxILEVBQU0rQyxLQUFLeUQsTUFBTXpELEtBQUtvRSxTQUFXbkgsRUFBTVYsU0FDakRhLEVBQVE2RyxFQUVIaEssRUFBSWdLLEVBQU9oSyxFQUFJaUssRUFBTSxJQUFLakssRUFDN0JnRCxFQUFNaEQsSUFBTWtLLElBQ2RMLEVBQUs3RyxFQUFNaEQsR0FBSWdELEVBQU1HLElBQ3JCQSxHQUFnQixHQUlwQixPQURBMEcsRUFBSzdHLEVBQU1HLEdBQVFILEVBQU1pSCxJQUNsQjlHLEVBS0tpSCxDQUFVcEgsRUFBT2dILEVBQU9DLEdBRWxDZCxFQUFVbkcsRUFBT2dILEVBQU9sSSxHQUN4QnFILEVBQVVuRyxFQUFPbEIsRUFBSSxFQUFHbUksSUFJNUJkLENBQVVuRyxFQUFPLEVBQUdBLEVBQU1WLE9BQVMsR0FDNUJVIiwiZmlsZSI6ImFsZ28ubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoXCJhbGdvXCIsIFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcImFsZ29cIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wiYWxnb1wiXSA9IGZhY3RvcnkoKTtcbn0pKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0aGlzLCBmdW5jdGlvbigpIHtcbnJldHVybiAiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMik7XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBRdWV1ZUFycmF5OiByZXF1aXJlKCcuL2FycmF5JyksXG4gIFF1ZXVlTGlua2VkTGlzdDogcmVxdWlyZSgnLi9saW5rZWQtbGlzdCcpXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLyoqXG4gKiBOb2RlIGZvciBsaW5rIGxpc3RcbiAqIEBwYXJhbSAgICAgICB7W3R5cGVdfSBkYXRhIFtkZXNjcmlwdGlvbl1cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBOb2RlKGRhdGEpIHtcbiAgdGhpcy5kYXRhID0gZGF0YTtcbn1cbi8qKlxuICogQ3JlYXRlIExpbmsgbGlzdFxuICogQHBhcmFtICAgICAgIHtbdHlwZV19IGRhdGEgW2Rlc2NyaXB0aW9uXVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIExpbmtlZExpc3QoZGF0YSkge1xuICBpZiAoZGF0YS5sZW5ndGggPiAwKSB7XG4gICAgdGhpcy5oZWFkID0gbmV3IE5vZGUoZGF0YVswXSk7XG4gICAgbGV0IGN1cnIgPSB0aGlzLmhlYWQ7XG5cbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IGRhdGEubGVuZ3RoOyArK2kpIHtcbiAgICAgIGN1cnIubmV4dCA9IG5ldyBOb2RlKGRhdGFbaV0pO1xuICAgICAgY3VyciA9IGN1cnIubmV4dDtcbiAgICB9XG4gIH1cbn07XG4vKipcbiAqIFByaW50IExpbmsgbGlzdCBpbiByZWN1cnNpdmUgZmFzaGlvblxuICogQHBhcmFtICB7W3R5cGVdfSBub2RlIFtkZXNjcmlwdGlvbl1cbiAqIEByZXR1cm4ge1t0eXBlXX0gICAgICBbZGVzY3JpcHRpb25dXG4gKi9cbkxpbmtlZExpc3QucHJpbnRSZWN1cnNpb24gPSBmdW5jdGlvbihub2RlKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIG51bGw7XG4gIHJldHVybiBMaW5rZWRMaXN0LnByaW50UmVjdXJzaW9uKG5vZGUubmV4dCk7XG59O1xuXG5MaW5rZWRMaXN0LnByb3RvdHlwZSA9IHtcbiAgLyoqXG4gICAqIFByaW50IGFsbCB2YWx1ZXMgaW4gYSBsaW5rbGlzdFxuICAgKiBAcmV0dXJuIHtbdHlwZV19IFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIHByaW50OiBmdW5jdGlvbigpIHtcbiAgICBsZXQgY3VyciA9IHRoaXMuaGVhZDtcblxuICAgIHdoaWxlIChjdXJyKSB7XG4gICAgICBjb25zb2xlLmxvZyhjdXJyLmRhdGEpO1xuICAgICAgY3VyciA9IGN1cnIubmV4dDtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIENvbnZlcnQgbGluayBsaXN0IHRvIGFycmF5XG4gICAqIEByZXR1cm4ge1t0eXBlXX0gW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgdG9BcnJheTogZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgYXJyYXkgPSBbXTtcbiAgICBsZXQgY3VyciA9IHRoaXMuaGVhZDtcblxuICAgIHdoaWxlIChjdXJyKSB7XG4gICAgICBhcnJheS5wdXNoKGN1cnIuZGF0YSk7XG4gICAgICBjdXJyID0gY3Vyci5uZXh0O1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEluc2VydCB2YWx1ZSBpbiBsaW5rbGlzdCBhdCBpbmRleCBvciBlbmRcbiAgICogQHBhcmFtICB7W3R5cGVdfSBkYXRhICBbZGVzY3JpcHRpb25dXG4gICAqIEBwYXJhbSAge1t0eXBlXX0gaW5kZXggW2Rlc2NyaXB0aW9uXVxuICAgKiBAcmV0dXJuIHtbdHlwZV19ICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIGluc2VydDogZnVuY3Rpb24oZGF0YSwgaW5kZXgpIHtcbiAgICBjb25zdCBuZXdOb2RlID0gbmV3IE5vZGUoZGF0YSk7XG5cbiAgICBpZiAoIXRoaXMuaGVhZCkge1xuICAgICAgdGhpcy5oZWFkID0gbmV3Tm9kZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgY29uc3QgdGVtcCA9IHRoaXMuaGVhZDtcblxuICAgICAgdGhpcy5oZWFkID0gbmV3Tm9kZTtcbiAgICAgIHRoaXMuaGVhZC5uZXh0ID0gdGVtcDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGxldCBjdXJyID0gdGhpcy5oZWFkO1xuICAgIGxldCBjdXJySW5kZXggPSAxO1xuXG4gICAgd2hpbGUgKGN1cnIubmV4dCkge1xuICAgICAgaWYgKGluZGV4ICE9PSB1bmRlZmluZWQgJiYgY3VyckluZGV4ID09PSBpbmRleCkge1xuICAgICAgICBsZXQgdGVtcCA9IGN1cnIubmV4dDtcblxuICAgICAgICBjdXJyLm5leHQgPSBuZXdOb2RlO1xuICAgICAgICBuZXdOb2RlLm5leHQgPSB0ZW1wO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIGN1cnIgPSBjdXJyLm5leHQ7XG4gICAgICArK2N1cnJJbmRleDtcbiAgICB9XG4gICAgY3Vyci5uZXh0ID0gbmV3Tm9kZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICAvKipcbiAgICogUmVtb3ZlIGZpcnN0IG5vZGUgaW4gbGluayBsaXN0XG4gICAqIEByZXR1cm4ge1t0eXBlXX0gW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgc2hpZnQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICghdGhpcy5oZWFkKSByZXR1cm4gbnVsbDtcbiAgICBjb25zdCBmaXJzdCA9IHRoaXMuaGVhZDtcblxuICAgIHRoaXMuaGVhZCA9IHRoaXMuaGVhZC5uZXh0O1xuICAgIHJldHVybiBmaXJzdC5kYXRhO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZW1vdmUgbGFzdCBub2RlIGluIGxpbmsgbGl0XG4gICAqIEByZXR1cm4ge1t0eXBlXX0gW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgcG9wOiBmdW5jdGlvbigpIHtcbiAgICBpZiAoIXRoaXMuaGVhZCkgcmV0dXJuIG51bGw7XG4gICAgbGV0IGN1cnIgPSB0aGlzLmhlYWQ7XG4gICAgbGV0IHByZXYgPSBudWxsO1xuXG4gICAgd2hpbGUgKGN1cnIubmV4dCkge1xuICAgICAgcHJldiA9IGN1cnI7XG4gICAgICBjdXJyID0gY3Vyci5uZXh0O1xuICAgIH1cbiAgICBwcmV2Lm5leHQgPSBudWxsO1xuICAgIHJldHVybiBjdXJyLmRhdGE7XG4gIH0sXG5cbiAgLyoqXG4gICAqIERlbGV0ZSBub2RlIGluIGxpbmsgbGlzdCBhdCBpbmRleFxuICAgKiBAcGFyYW0gIHtbdHlwZV19IGluZGV4IFtkZXNjcmlwdGlvbl1cbiAgICogQHJldHVybiB7W3R5cGVdfSAgICAgICBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBkZWxldGU6IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgaWYgKCF0aGlzLmhlYWQpIHJldHVybiBudWxsO1xuXG4gICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICB0aGlzLmhlYWQgPSB0aGlzLmhlYWQubmV4dDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGxldCBjdXJyID0gdGhpcy5oZWFkO1xuICAgIGxldCBjdXJySW5kZXggPSAwO1xuICAgIGxldCBwcmV2ID0gbnVsbDtcblxuICAgIHdoaWxlIChjdXJyLm5leHQpIHtcbiAgICAgIGlmIChpbmRleCAhPT0gdW5kZWZpbmVkICYmIGN1cnJJbmRleCA9PT0gaW5kZXgpIHtcbiAgICAgICAgcHJldi5uZXh0ID0gY3Vyci5uZXh0O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHByZXYgPSBjdXJyO1xuICAgICAgY3VyciA9IGN1cnIubmV4dDtcbiAgICAgICsrY3VyckluZGV4O1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgLyoqXG4gICAqIFJldmVyc2UgTGlua0xpc3RcbiAgICogQHJldHVybiB7W3R5cGVdfSBbZGVzY3JpcHRpb25dXG4gICAqL1xuICByZXZlcnNlOiBmdW5jdGlvbigpIHtcbiAgICBpZiAoIXRoaXMuaGVhZCkgcmV0dXJuIG51bGw7XG4gICAgbGV0IGN1cnIgPSB0aGlzLmhlYWQ7XG4gICAgbGV0IHByZXYgPSBudWxsO1xuXG4gICAgd2hpbGUgKGN1cnIpIHtcbiAgICAgIGxldCBuZXh0ID0gY3Vyci5uZXh0O1xuXG4gICAgICBjdXJyLm5leHQgPSBwcmV2O1xuICAgICAgcHJldiA9IGN1cnI7XG4gICAgICBjdXJyID0gbmV4dDtcbiAgICB9XG4gICAgdGhpcy5oZWFkID0gcHJldjtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICAvKipcbiAgICogUmV2ZXJzZSBMaW5rIGxpc3QgcmVjdXJzaXZlbHlcbiAgICogQHBhcmFtICB7W3R5cGVdfSBub2RlIFtkZXNjcmlwdGlvbl1cbiAgICogQHJldHVybiB7W3R5cGVdfSAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIHJldmVyc2VSZWN1cnNpb246IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBpZiAoIW5vZGUubmV4dCkge1xuICAgICAgdGhpcy5oZWFkID0gbm9kZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5yZXZlcnNlUmVjdXJzaW9uKG5vZGUubmV4dCk7XG4gICAgbGV0IHRlbXAgPSBub2RlLm5leHQ7XG5cbiAgICB0ZW1wLm5leHQgPSBub2RlO1xuICAgIG5vZGUubmV4dCA9IG51bGw7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBMaW5rZWRMaXN0OiBMaW5rZWRMaXN0LFxuICBOb2RlOiBOb2RlXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgZGF0YVN0cnVjdHVyZXMgZnJvbSAnLi9kYXRhLXN0cnVjdHVyZXMnO1xuaW1wb3J0IGFsZ29yaXRobXMgZnJvbSAnLi9hbGdvcml0aG1zJztcblxuZXhwb3J0IHtcbiAgZGF0YVN0cnVjdHVyZXMsXG4gIGFsZ29yaXRobXNcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBCaW5hcnlTZWFyY2hUcmVlOiByZXF1aXJlKCcuL2JpbmFyeS1zZWFyY2gtdHJlZScpLFxuICBHcmFwaDogcmVxdWlyZSgnLi9ncmFwaCcpLFxuICBsaW5rZWRMaXN0czogcmVxdWlyZSgnLi9saW5rZWQtbGlzdHMnKSxcbiAgcXVldWVzOiByZXF1aXJlKCcuL3F1ZXVlcycpLFxuICBzdGFja3M6IHJlcXVpcmUoJy4vc3RhY2tzJylcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIE5vZGUodmFsKSB7XG4gIHRoaXMuX2RhdGEgPSB2YWw7XG59O1xuXG5Ob2RlLnByb3RvdHlwZSA9IHtcbiAgZ2V0IGRhdGEoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGE7XG4gIH0sXG5cbiAgc2V0IGRhdGEodmFsKSB7XG4gICAgdGhpcy5fZGF0YSA9IHZhbDtcbiAgfSxcblxuICBnZXQgbGVmdCgpIHtcbiAgICByZXR1cm4gdGhpcy5fbGVmdDtcbiAgfSxcblxuICBzZXQgbGVmdChub2RlKSB7XG4gICAgaWYgKG5vZGUgJiYgbm9kZS5jb25zdHJ1Y3RvciA9PT0gTnVtYmVyKSB0aGlzLl9sZWZ0ID0gbmV3IE5vZGUobm9kZSk7XG4gICAgZWxzZSB0aGlzLl9sZWZ0ID0gbm9kZTtcbiAgfSxcblxuICBnZXQgcmlnaHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JpZ2h0O1xuICB9LFxuXG4gIHNldCByaWdodChub2RlKSB7XG4gICAgaWYgKG5vZGUgJiYgbm9kZS5jb25zdHJ1Y3RvciA9PT0gTnVtYmVyKSB0aGlzLl9yaWdodCA9IG5ldyBOb2RlKG5vZGUpO1xuICAgIGVsc2UgdGhpcy5fcmlnaHQgPSBub2RlO1xuICB9LFxuXG4gIGluc2VydDogZnVuY3Rpb24oZGF0YSkge1xuICAgIGlmICghdGhpcy5kYXRhKSB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIGVsc2UgaWYgKGRhdGEgPiB0aGlzLmRhdGEpIHtcbiAgICAgIGlmICh0aGlzLnJpZ2h0KSB0aGlzLnJpZ2h0Lmluc2VydChkYXRhKTtcbiAgICAgIGVsc2UgdGhpcy5yaWdodCA9IGRhdGE7XG4gICAgfSBlbHNlIGlmIChkYXRhIDwgdGhpcy5kYXRhKSB7XG4gICAgICBpZiAodGhpcy5sZWZ0KSB0aGlzLmxlZnQuaW5zZXJ0KGRhdGEpO1xuICAgICAgZWxzZSB0aGlzLmxlZnQgPSBkYXRhO1xuICAgIH1cbiAgfSxcblxuICBzZWFyY2g6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICBpZiAoIXRoaXMuZGF0YSkgcmV0dXJuIG51bGw7XG4gICAgaWYgKGRhdGEgPT09IHRoaXMuZGF0YSkgcmV0dXJuIHRoaXM7XG4gICAgaWYgKGRhdGEgPiB0aGlzLmRhdGEgJiYgdGhpcy5yaWdodCkgcmV0dXJuIHRoaXMucmlnaHQuc2VhcmNoKGRhdGEpO1xuICAgIGlmIChkYXRhIDwgdGhpcy5kYXRhICYmIHRoaXMubGVmdCkgcmV0dXJuIHRoaXMubGVmdC5zZWFyY2goZGF0YSk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIEJpbmFyeVNlYXJjaFRyZWUoZGF0YSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkgZGF0YS5mb3JFYWNoKG4gPT4gdGhpcy5pbnNlcnQobikpO1xuICBlbHNlIHRoaXMuX3Jvb3QgPSBuZXcgTm9kZShkYXRhKTtcbn07XG5cbkJpbmFyeVNlYXJjaFRyZWUucHJvdG90eXBlID0ge1xuICBnZXQgcm9vdCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcm9vdDtcbiAgfSxcblxuICBzZXQgcm9vdChub2RlKSB7XG4gICAgdGhpcy5fcm9vdCA9IG5vZGU7XG4gIH0sXG5cbiAgaW5zZXJ0OiBmdW5jdGlvbihkYXRhKSB7XG4gICAgaWYgKCF0aGlzLnJvb3QpIHRoaXMucm9vdCA9IG5ldyBOb2RlKGRhdGEpO1xuICAgIGVsc2UgdGhpcy5yb290Lmluc2VydChkYXRhKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBoYXM6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICBpZiAoIXRoaXMucm9vdCkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0aGlzLnJvb3Quc2VhcmNoKGRhdGEpICE9PSBudWxsO1xuICB9LFxuXG4gIHNlYXJjaDogZnVuY3Rpb24oZGF0YSkge1xuICAgIGlmICghdGhpcy5yb290KSByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4gdGhpcy5yb290LnNlYXJjaChkYXRhKTtcbiAgfSxcblxuICBmaW5kTWluOiBmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKCF0aGlzLnJvb3QpIHJldHVybjtcbiAgICBjb25zdCBnZXRNaW4gPSAobm9kZSkgPT4ge1xuICAgICAgaWYgKG5vZGUubGVmdCkgcmV0dXJuIGdldE1pbihub2RlLmxlZnQpO1xuICAgICAgcmV0dXJuIG5vZGUuZGF0YTtcbiAgICB9O1xuXG4gICAgcmV0dXJuICFub2RlID8gZ2V0TWluKHRoaXMucm9vdCkgOiBnZXRNaW4obm9kZSk7XG4gIH0sXG5cbiAgZmluZE1heDogZnVuY3Rpb24obm9kZSkge1xuICAgIGlmICghdGhpcy5yb290KSByZXR1cm47XG4gICAgY29uc3QgZ2V0TWF4ID0gKG5vZGUpID0+IHtcbiAgICAgIGlmIChub2RlLnJpZ2h0KSByZXR1cm4gZ2V0TWF4KG5vZGUucmlnaHQpO1xuICAgICAgcmV0dXJuIG5vZGUuZGF0YTtcbiAgICB9O1xuXG4gICAgcmV0dXJuICFub2RlID8gZ2V0TWF4KHRoaXMucm9vdCkgOiBnZXRNYXgobm9kZSk7XG4gIH0sXG5cbiAgZGVsZXRlOiBmdW5jdGlvbih2YWwpIHtcbiAgICBjb25zdCBkZWxldGVOb2RlID0gKHJvb3QsIHZhbCkgPT4ge1xuICAgICAgLy8gSWYgTm8gTm9kZSByZXR1cm4gdW5kZWZpbmVkXG4gICAgICBpZiAoIXJvb3QpIHJldHVybjtcbiAgICAgIC8vIElmIHZhbCBpcyBsZXNzIHRoYW4gY3VycmVudCBub2RlIGRhdGEuIENvbnRpbnVlIG9uIHRvIGxlZnQgY2hpbGQuXG4gICAgICBpZiAodmFsIDwgcm9vdC5kYXRhKSByZXR1cm4gZGVsZXRlTm9kZShyb290LmxlZnQsIHZhbCwgcm9vdCk7XG4gICAgICAvLyBJZiB2YWwgaXMgZ3JlYXRlciB0aGFuIGN1cnJlbnQgbm9kZSBkYXRhLiBDb250aW51ZSBvbiB0byByaWdodCBjaGlsZC5cbiAgICAgIGlmICh2YWwgPiByb290LmRhdGEpIHJldHVybiBkZWxldGVOb2RlKHJvb3QucmlnaHQsIHZhbCwgcm9vdCk7XG4gICAgICAvLyBDYXNlIDE6IE5vIGNoaWxkcmVuLCBkZWFsbG9jYXRlIGNoaWxkIGZyb20gcGFyZW50XG4gICAgICBpZiAocm9vdC5sZWZ0ICYmIHJvb3QucmlnaHQpIHtcbiAgICAgICAgLy8gQ2FzZSAzOiBpZiAyIGNoaWxkcmVuXG4gICAgICAgIC8vIEZpbmQgbWluaW11bSB2YWx1ZSBvZiB0aGUgcmlnaHQgbm9kZVxuICAgICAgICBsZXQgdGVtcCA9IHJvb3QucmlnaHQ7XG5cbiAgICAgICAgd2hpbGUgKHRlbXAubGVmdCkgdGVtcCA9IHRlbXAubGVmdDtcbiAgICAgICAgLy8gd3JpdGUgbm9kZSBkYXRhIHRvIHRoZSBtaW5pbXVtIHZhbHVlc1xuICAgICAgICByb290LmRhdGEgPSB0ZW1wLmRhdGE7XG4gICAgICAgIC8vIE1vdmUgb24gdG8gdGhlIHJpZ2h0IGFuZCBjb250aW51ZSBvblxuICAgICAgICByb290LnJpZ2h0ID0gZGVsZXRlTm9kZShyb290LnJpZ2h0LCB0ZW1wLmRhdGEpO1xuICAgICAgICByZXR1cm4gcm9vdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByb290LmxlZnQgfHwgcm9vdC5yaWdodDtcbiAgICB9O1xuXG4gICAgZGVsZXRlTm9kZSh0aGlzLnJvb3QsIHZhbCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgbGV2ZWxPcmRlcjogZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgdmFscyA9IFtdO1xuXG4gICAgaWYgKHRoaXMucm9vdCkge1xuICAgICAgY29uc3QgcXVldWUgPSBbXTtcblxuICAgICAgcXVldWUucHVzaCh0aGlzLnJvb3QpO1xuICAgICAgd2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgbGV0IGN1cnIgPSBxdWV1ZS5zaGlmdCgpO1xuXG4gICAgICAgIHZhbHMucHVzaChjdXJyLmRhdGEpO1xuICAgICAgICBpZiAoY3Vyci5sZWZ0KSBxdWV1ZS5wdXNoKGN1cnIubGVmdCk7XG4gICAgICAgIGlmIChjdXJyLnJpZ2h0KSBxdWV1ZS5wdXNoKGN1cnIucmlnaHQpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFscztcbiAgfSxcblxuICBwcmVPcmRlcjogZnVuY3Rpb24oKSB7XG4gICAgbGV0IHZhbHMgPSBbXTtcblxuICAgIGNvbnN0IHRyYXZlcnNlID0gKG5vZGUpID0+IHtcbiAgICAgIHZhbHMucHVzaChub2RlLmRhdGEpO1xuICAgICAgaWYgKG5vZGUubGVmdCkgdHJhdmVyc2Uobm9kZS5sZWZ0KTtcbiAgICAgIGlmIChub2RlLnJpZ2h0KSB0cmF2ZXJzZShub2RlLnJpZ2h0KTtcbiAgICB9O1xuXG4gICAgaWYgKHRoaXMucm9vdCkgdHJhdmVyc2UodGhpcy5yb290KTtcbiAgICByZXR1cm4gdmFscztcbiAgfSxcblxuICBpbk9yZGVyOiBmdW5jdGlvbigpIHtcbiAgICBsZXQgdmFscyA9IFtdO1xuXG4gICAgY29uc3QgdHJhdmVyc2UgPSAobm9kZSkgPT4ge1xuICAgICAgaWYgKG5vZGUubGVmdCkgdHJhdmVyc2Uobm9kZS5sZWZ0KTtcbiAgICAgIHZhbHMucHVzaChub2RlLmRhdGEpO1xuICAgICAgaWYgKG5vZGUucmlnaHQpIHRyYXZlcnNlKG5vZGUucmlnaHQpO1xuICAgIH07XG5cbiAgICBpZiAodGhpcy5yb290KSB0cmF2ZXJzZSh0aGlzLnJvb3QpO1xuICAgIHJldHVybiB2YWxzO1xuICB9LFxuXG4gIHBvc3RPcmRlcjogZnVuY3Rpb24oKSB7XG4gICAgbGV0IHZhbHMgPSBbXTtcblxuICAgIGNvbnN0IHRyYXZlcnNlID0gKG5vZGUpID0+IHtcbiAgICAgIGlmIChub2RlLmxlZnQpIHRyYXZlcnNlKG5vZGUubGVmdCk7XG4gICAgICBpZiAobm9kZS5yaWdodCkgdHJhdmVyc2Uobm9kZS5yaWdodCk7XG4gICAgICB2YWxzLnB1c2gobm9kZS5kYXRhKTtcbiAgICB9O1xuXG4gICAgaWYgKHRoaXMucm9vdCkgdHJhdmVyc2UodGhpcy5yb290KTtcbiAgICByZXR1cm4gdmFscztcbiAgfSxcblxuICBtYXhEZXB0aDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKCF0aGlzLnJvb3QpIHJldHVybiAwO1xuICAgIGNvbnN0IG1heERlcHRoID0gKG5vZGUpID0+IHtcbiAgICAgIGlmICghbm9kZSkgcmV0dXJuIDA7XG4gICAgICByZXR1cm4gTWF0aC5tYXgobWF4RGVwdGgobm9kZS5sZWZ0KSwgbWF4RGVwdGgobm9kZS5yaWdodCkpICsgMTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIG1heERlcHRoKHRoaXMucm9vdCk7XG4gIH0sXG5cbiAgaXNWYWxpZDogZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgaXNCU1QgPSAobm9kZSwgbWluLCBtYXgpID0+IHtcbiAgICAgIC8vIElmIG5vIE5vZGUgdGhlbiB3ZSBoYXZlIHJlYWNoZWQgdGhlIGVuZCBvZiB0aGUgdHJlZS5cbiAgICAgIC8vIFJldHVybiB0cnVlXG4gICAgICBpZiAoIW5vZGUpIHJldHVybiB0cnVlO1xuICAgICAgLy8gVmFsaWRhdGUgaWYgdGhlIGRhdGEgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHRoZSBtaW4gb3IgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIG1heC5cbiAgICAgIC8vIFRoZW4gdGhlIHRyZWUgaXMgbm90IGEgdmFsaWQgc2VhcmNoIHRyZWUuXG4gICAgICBpZiAobm9kZS5kYXRhIDw9IG1pbiB8fCBub2RlLmRhdGEgPj0gbWF4KSByZXR1cm4gZmFsc2U7XG4gICAgICByZXR1cm4gaXNCU1Qobm9kZS5sZWZ0LCBtaW4sIG5vZGUuZGF0YSkgJiYgaXNCU1Qobm9kZS5yaWdodCwgbm9kZS5kYXRhLCBtYXgpO1xuICAgIH07XG5cbiAgICByZXR1cm4gaXNCU1QodGhpcy5yb290LCAtSW5maW5pdHksIEluZmluaXR5KTtcbiAgfSxcblxuICBwYXRoU3VtOiBmdW5jdGlvbihzdW0pIHtcbiAgICBjb25zdCBoYXNQYXRoU3VtID0gKHJvb3QsIHN1bSkgPT4ge1xuICAgICAgaWYgKCFyb290KSByZXR1cm4gZmFsc2U7XG4gICAgICBzdW0gLT0gcm9vdC5kYXRhO1xuICAgICAgaWYgKCFyb290LmxlZnQgJiYgIXJvb3QucmlnaHQpIHJldHVybiBzdW0gPT09IDA7XG4gICAgICByZXR1cm4gaGFzUGF0aFN1bShyb290LmxlZnQsIHN1bSkgfHwgaGFzUGF0aFN1bShyb290LnJpZ2h0LCBzdW0pO1xuICAgIH07XG5cbiAgICByZXR1cm4gaGFzUGF0aFN1bSh0aGlzLnJvb3QsIHN1bSk7XG4gIH0sXG5cbiAgaXNTeW1tZXRyaWM6IGZ1bmN0aW9uKCkge1xuICAgIGlmICghdGhpcy5yb290KSByZXR1cm4gdHJ1ZTtcbiAgICBjb25zdCB2YWxpZGF0ZVN5bW1ldHJ5ID0gKGxlZnQsIHJpZ2h0KSA9PiB7XG4gICAgICBpZiAoIWxlZnQgfHwgIXJpZ2h0KSByZXR1cm4gbGVmdCA9PT0gcmlnaHQ7XG4gICAgICBpZiAobGVmdC5kYXRhICE9PSByaWdodC5kYXRhKSByZXR1cm4gZmFsc2U7XG4gICAgICByZXR1cm4gdmFsaWRhdGVTeW1tZXRyeShsZWZ0LmxlZnQsIHJpZ2h0LnJpZ2h0KSAmJiB2YWxpZGF0ZVN5bW1ldHJ5KGxlZnQucmlnaHQsIHJpZ2h0LmxlZnQpO1xuICAgIH07XG5cbiAgICByZXR1cm4gdmFsaWRhdGVTeW1tZXRyeSh0aGlzLnJvb3QubGVmdCwgdGhpcy5yb290LnJpZ2h0KTtcbiAgfSxcblxuICBnZXRTdWNjZXNzb3I6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAvLyBTZWFyY2ggdGhlIG5vZGVcbiAgICBsZXQgY3VyciA9IHRoaXMuc2VhcmNoKGRhdGEpO1xuXG4gICAgaWYgKCFjdXJyKSByZXR1cm4gbnVsbDtcbiAgICAvLyBDYXNlIDE6IE5vZGUgaGFzIHJpZ2h0IHN1YnRyZWVcbiAgICBpZiAoY3Vyci5yaWdodCAhPT0gdW5kZWZpbmVkKSByZXR1cm4gdGhpcy5maW5kTWluKGN1cnIucmlnaHQpO1xuICAgIC8vIENhc2UgMjogTm8gcmlnaHQgc3VidHJlZVxuICAgIGxldCBzdWNjZXNzb3IgPSBudWxsO1xuICAgIGxldCBhbmNlc3RvciA9IHRoaXMucm9vdDtcblxuICAgIHdoaWxlIChhbmNlc3RvciAhPT0gY3Vycikge1xuICAgICAgaWYgKGN1cnIuZGF0YSA8IGFuY2VzdG9yLmRhdGEpIHtcbiAgICAgICAgc3VjY2Vzc29yID0gYW5jZXN0b3I7XG4gICAgICAgIGFuY2VzdG9yID0gYW5jZXN0b3IubGVmdDtcbiAgICAgIH0gZWxzZSBhbmNlc3RvciA9IGFuY2VzdG9yLnJpZ2h0O1xuICAgIH1cbiAgICByZXR1cm4gc3VjY2Vzc29yLmRhdGE7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQmluYXJ5U2VhcmNoVHJlZTtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgeyBRdWV1ZUxpbmtlZExpc3QgfSA9IHJlcXVpcmUoJy4uL3F1ZXVlcycpO1xuXG5mdW5jdGlvbiBHcmFwaCgpIHtcbiAgdGhpcy5udW1PZlZlcnRpY2VzID0gMDtcbiAgdGhpcy5saXN0ID0gbmV3IE1hcCgpO1xufTtcblxuR3JhcGgucHJvdG90eXBlID0ge1xuICBhZGRWZXJ0ZXg6IGZ1bmN0aW9uKHYpIHtcbiAgICArK3RoaXMubnVtT2ZWZXJ0aWNlcztcbiAgICB0aGlzLmxpc3Quc2V0KHYsIFtdKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBhZGRFZGdlOiBmdW5jdGlvbih2LCB3KSB7XG4gICAgaWYgKCF0aGlzLmxpc3QuZ2V0KHYpKSB0aGlzLmFkZFZlcnRleCh2KTtcbiAgICB0aGlzLmxpc3QuZ2V0KHYpLnB1c2godyk7XG4gICAgaWYgKCF0aGlzLmxpc3QuZ2V0KHcpKSB0aGlzLmFkZFZlcnRleCh3KTtcbiAgICB0aGlzLmxpc3QuZ2V0KHcpLnB1c2godik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgdG9PYmplY3Q6IGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IGcgPSB7fTtcblxuICAgIHRoaXMubGlzdC5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICBnW2tleV0gPSB2YWx1ZTtcbiAgICB9KTtcbiAgICByZXR1cm4gZztcbiAgfSxcblxuICBiZnM6IGZ1bmN0aW9uKHYpIHtcbiAgICBjb25zdCB2aXNpdGVkID0gQXJyYXkodGhpcy5udW1PZlZlcnRpY2VzKS5maWxsKGZhbHNlKTtcbiAgICBjb25zdCBxID0gbmV3IFF1ZXVlTGlua2VkTGlzdCgpO1xuXG4gICAgdmlzaXRlZFt2XSA9IHRydWU7XG4gICAgcS5lbnF1ZXVlKHYpO1xuXG4gICAgd2hpbGUgKCFxLmlzRW1wdHkoKSkge1xuICAgICAgY29uc3QgZWxlbSA9IHEuZGVxdWV1ZSgpO1xuICAgICAgY29uc3QgZWRnZXMgPSB0aGlzLmxpc3QuZ2V0KGVsZW0pO1xuXG4gICAgICBlZGdlcy5mb3JFYWNoKG4gPT4ge1xuICAgICAgICBpZiAoIXZpc2l0ZWRbbl0pIHtcbiAgICAgICAgICB2aXNpdGVkW25dID0gdHJ1ZTtcbiAgICAgICAgICBxLmVucXVldWUobik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcblxuICBkZnM6IGZ1bmN0aW9uKHYpIHtcblxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEdyYXBoO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBRdWV1ZUFycmF5KCkge1xuICB0aGlzLl9xdWV1ZSA9IEFycmF5KDEwKS5maWxsKG51bGwpO1xuICB0aGlzLl9mcm9udCA9IC0xO1xuICB0aGlzLl9yZWFyID0gLTE7XG59XG5cblF1ZXVlQXJyYXkucHJvdG90eXBlID0ge1xuICBlbnF1ZXVlOiBmdW5jdGlvbih4KSB7XG4gICAgaWYgKCh0aGlzLl9yZWFyICsgMSkgJSB0aGlzLl9xdWV1ZS5sZW5ndGggPT09IHRoaXMuX2Zyb250KSByZXR1cm47XG4gICAgaWYgKHRoaXMuaXNFbXB0eSgpKSB0aGlzLl9yZWFyID0gdGhpcy5fZnJvbnQgPSAwO1xuICAgIGVsc2UgdGhpcy5fcmVhciA9ICh0aGlzLl9yZWFyICsgMSkgJSB0aGlzLl9xdWV1ZS5sZW5ndGg7XG4gICAgdGhpcy5fcXVldWVbdGhpcy5fcmVhcl0gPSB4O1xuICB9LFxuXG4gIGRlcXVldWU6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLmlzRW1wdHkoKSkgcmV0dXJuO1xuICAgIGxldCB2YWw7XG5cbiAgICBpZiAodGhpcy5fZnJvbnQgPT09IHRoaXMuX3JlYXIpIHtcbiAgICAgIHZhbCA9IHRoaXMuX3F1ZXVlW3RoaXMuX2Zyb250XTtcbiAgICAgIHRoaXMuX2Zyb250ID0gdGhpcy5fcmVhciA9IC0xO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWwgPSB0aGlzLl9xdWV1ZVt0aGlzLl9mcm9udF07XG4gICAgICArK3RoaXMuX2Zyb250O1xuICAgIH1cbiAgICByZXR1cm4gdmFsO1xuICB9LFxuXG4gIGZyb250OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fcXVldWVbdGhpcy5fZnJvbnRdO1xuICB9LFxuXG4gIGlzRW1wdHk6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9mcm9udCA9PT0gLSAxICYmIHRoaXMuX3JlYXIgPT09IC0xO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFF1ZXVlQXJyYXk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIE5vZGUodmFsKSB7XG4gIHRoaXMuZGF0YSA9IHZhbDtcbn1cblxuZnVuY3Rpb24gUXVldWVMaW5rTGlzdCgpIHt9XG5cblF1ZXVlTGlua0xpc3QucHJvdG90eXBlID0ge1xuICBlbnF1ZXVlOiBmdW5jdGlvbih2YWwpIHtcbiAgICBpZiAodGhpcy5pc0VtcHR5KCkpIHRoaXMuX3JlYXIgPSB0aGlzLl9mcm9udCA9IG5ldyBOb2RlKHZhbCk7XG4gICAgZWxzZSB0aGlzLl9yZWFyID0gdGhpcy5fcmVhci5uZXh0ID0gbmV3IE5vZGUodmFsKTtcbiAgfSxcblxuICBkZXF1ZXVlOiBmdW5jdGlvbigpIHtcbiAgICBjb25zdCBub2RlID0gdGhpcy5fZnJvbnQ7XG5cbiAgICBpZiAobm9kZSA9PT0gdGhpcy5fcmVhcikgdGhpcy5fcmVhciA9IHRoaXMuX2Zyb250ID0gdW5kZWZpbmVkO1xuICAgIGVsc2UgaWYgKG5vZGUubmV4dCkgdGhpcy5fZnJvbnQgPSBub2RlLm5leHQ7XG4gICAgcmV0dXJuIG5vZGUuZGF0YTtcbiAgfSxcblxuICBmcm9udDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Zyb250LmRhdGE7XG4gIH0sXG5cbiAgaXNFbXB0eTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Zyb250ID09PSB1bmRlZmluZWQgJiYgdGhpcy5fcmVhciA9PT0gdW5kZWZpbmVkO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFF1ZXVlTGlua0xpc3Q7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHsgTGlua2VkTGlzdCB9ID0gcmVxdWlyZSgnLi9saW5rZWQtbGlzdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgRG91Ymx5TGlua2VkTGlzdDogcmVxdWlyZSgnLi9kb3VibHktbGlua2VkLWxpc3QnKSxcbiAgTGlua2VkTGlzdDogTGlua2VkTGlzdFxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3Qge1xuICBMaW5rZWRMaXN0LFxuICBOb2RlXG59ID0gcmVxdWlyZSgnLi9saW5rZWQtbGlzdCcpO1xuXG5mdW5jdGlvbiBEb3VibGVOb2RlKGRhdGEpIHtcbiAgTm9kZS5jYWxsKHRoaXMsIGRhdGEpO1xufTtcblxuLy8gY3JlYXRlIGNvbnN0cnVjdG9yIHdpdGggTGlua2VkTGlzdCBpbmhlcml0YW5jZVxuZnVuY3Rpb24gRG91Ymx5TGlua2VkTGlzdChkYXRhKSB7XG4gIC8vIExpbmtlZExpc3QuY2FsbCh0aGlzLCBkYXRhKTtcbiAgaWYgKGRhdGEubGVuZ3RoID4gMCkge1xuICAgIHRoaXMuaGVhZCA9IG5ldyBEb3VibGVOb2RlKGRhdGFbMF0pO1xuICAgIGxldCBjdXJyID0gdGhpcy5oZWFkO1xuXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBkYXRhLmxlbmd0aDsgKytpKSB7XG4gICAgICBsZXQgbmV3Tm9kZSA9IG5ldyBEb3VibGVOb2RlKGRhdGFbaV0pO1xuXG4gICAgICBuZXdOb2RlLnByZXYgPSBjdXJyO1xuICAgICAgY3Vyci5uZXh0ID0gbmV3Tm9kZTtcbiAgICAgIGN1cnIgPSBjdXJyLm5leHQ7XG4gICAgfVxuICB9XG59O1xuLy8gSW5oZXJpdCBhbGwgcHJvdG90eXBlIGZyb20gTGlua2VkTGlzdFxuRG91Ymx5TGlua2VkTGlzdC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKExpbmtlZExpc3QucHJvdG90eXBlKTtcbi8vIG92ZXJ3cml0ZSBwcm90b3R5cGVzXG4vLyBSZWFzc2lnbiBjb25zdHJ1Y3RvciBwcm90b3R5cGVcbkRvdWJseUxpbmtlZExpc3QucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRG91Ymx5TGlua2VkTGlzdDtcbkRvdWJseUxpbmtlZExpc3QucHJvdG90eXBlLmluc2VydCA9IGZ1bmN0aW9uKGRhdGEsIGluZGV4KSB7XG4gIGNvbnN0IG5ld05vZGUgPSBuZXcgTm9kZShkYXRhKTtcblxuICBpZiAoIXRoaXMuaGVhZCkge1xuICAgIHRoaXMuaGVhZCA9IG5ld05vZGU7XG4gICAgcmV0dXJuIHRoaXMuaGVhZDtcbiAgfVxuXG4gIGlmIChpbmRleCA9PT0gMCkge1xuICAgIGNvbnN0IHRlbXAgPSB0aGlzLmhlYWQ7XG5cbiAgICB0aGlzLmhlYWQgPSBuZXdOb2RlO1xuICAgIHRoaXMuaGVhZC5uZXh0ID0gdGVtcDtcbiAgICByZXR1cm4gdGhpcy5oZWFkO1xuICB9XG5cbiAgbGV0IGN1cnIgPSB0aGlzLmhlYWQ7XG4gIGxldCBjdXJySW5kZXggPSAxO1xuXG4gIHdoaWxlIChjdXJyLm5leHQpIHtcbiAgICBpZiAoaW5kZXggIT09IHVuZGVmaW5lZCAmJiBjdXJySW5kZXggPT09IGluZGV4KSB7XG4gICAgICBsZXQgdGVtcCA9IGN1cnIubmV4dDtcblxuICAgICAgY3Vyci5uZXh0ID0gbmV3Tm9kZTtcbiAgICAgIG5ld05vZGUucHJldiA9IGN1cnI7XG4gICAgICBuZXdOb2RlLm5leHQgPSB0ZW1wO1xuICAgICAgdGVtcC5wcmV2ID0gbmV3Tm9kZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBjdXJyID0gY3Vyci5uZXh0O1xuICAgICsrY3VyckluZGV4O1xuICB9XG4gIGN1cnIubmV4dCA9IG5ld05vZGU7XG4gIG5ld05vZGUucHJldiA9IGN1cnI7XG4gIHJldHVybiB0aGlzO1xufTtcblxuRG91Ymx5TGlua2VkTGlzdC5wcm90b3R5cGUuc2hpZnQgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCF0aGlzLmhlYWQpIHJldHVybjtcbiAgY29uc3QgZmlyc3QgPSB0aGlzLmhlYWQ7XG5cbiAgdGhpcy5oZWFkID0gZmlyc3QubmV4dDtcbiAgdGhpcy5oZWFkLnByZXYgPSBudWxsO1xuICByZXR1cm4gZmlyc3QuZGF0YTtcbn07XG5cbkRvdWJseUxpbmtlZExpc3QucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uKGluZGV4KSB7XG4gIGlmICghdGhpcy5oZWFkKSByZXR1cm4gbnVsbDtcblxuICBpZiAoaW5kZXggPT09IDApIHtcbiAgICB0aGlzLmhlYWQgPSB0aGlzLmhlYWQubmV4dDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGxldCBjdXJyID0gdGhpcy5oZWFkO1xuICBsZXQgY3VyckluZGV4ID0gMDtcbiAgbGV0IHByZXYgPSBudWxsO1xuXG4gIHdoaWxlIChjdXJyLm5leHQpIHtcbiAgICBpZiAoaW5kZXggIT09IHVuZGVmaW5lZCAmJiBjdXJySW5kZXggPT09IGluZGV4KSB7XG4gICAgICBjb25zdCBuZXh0ID0gY3Vyci5uZXh0O1xuXG4gICAgICBwcmV2Lm5leHQgPSBuZXh0O1xuICAgICAgbmV4dC5wcmV2ID0gcHJldjtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBwcmV2ID0gY3VycjtcbiAgICBjdXJyID0gY3Vyci5uZXh0O1xuICAgICsrY3VyckluZGV4O1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuRG91Ymx5TGlua2VkTGlzdC5wcm90b3R5cGUucmV2ZXJzZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIXRoaXMuaGVhZCkgcmV0dXJuIG51bGw7XG4gIGxldCBjdXJyID0gdGhpcy5oZWFkO1xuICBsZXQgcHJldiA9IG51bGw7XG5cbiAgd2hpbGUgKGN1cnIpIHtcbiAgICBsZXQgbmV4dCA9IGN1cnIubmV4dDtcblxuICAgIGN1cnIubmV4dCA9IHByZXY7XG4gICAgaWYgKHByZXYpIHByZXYucHJldiA9IGN1cnI7XG4gICAgcHJldiA9IGN1cnI7XG4gICAgY3VyciA9IG5leHQ7XG4gIH1cbiAgdGhpcy5oZWFkID0gcHJldjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJldmVyc2UgTGluayBsaXN0IHJlY3Vyc2l2ZWx5XG4gKiBAcGFyYW0gIHtbdHlwZV19IG5vZGUgW2Rlc2NyaXB0aW9uXVxuICogQHJldHVybiB7W3R5cGVdfSAgICAgIFtkZXNjcmlwdGlvbl1cbiAqL1xuRG91Ymx5TGlua2VkTGlzdC5wcm90b3R5cGUucmV2ZXJzZVJlY3Vyc2lvbiA9IGZ1bmN0aW9uKCkge1xuICBjb25zdCByZXZlcnNlID0gKG5vZGUpID0+IHtcbiAgICBpZiAoIW5vZGUgfHwgIW5vZGUubmV4dCkgcmV0dXJuO1xuICAgIHJldmVyc2Uobm9kZS5uZXh0KTtcbiAgICBjb25zdCB0ZW1wID0gbm9kZS5uZXh0O1xuXG4gICAgdGVtcC5uZXh0ID0gbm9kZTtcbiAgICBub2RlLnByZXYgPSB0ZW1wO1xuICAgIG5vZGUubmV4dCA9IG51bGw7XG4gIH07XG5cbiAgcmV2ZXJzZSh0aGlzLmhlYWQpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRG91Ymx5TGlua2VkTGlzdDtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFN0YWNrQXJyYXk6IHJlcXVpcmUoJy4vYXJyYXknKSxcbiAgU3RhY2tMaW5rZWRMaXN0OiByZXF1aXJlKCcuL2xpbmtlZC1saXN0Jylcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIFN0YWNrQXJyYXkoKSB7XG4gIHRoaXMuX3N0YWNrID0gW107XG4gIHRoaXMuX3RvcCA9IC0xO1xufVxuXG5TdGFja0FycmF5LnByb3RvdHlwZSA9IHtcbiAgcHVzaDogZnVuY3Rpb24oZGF0YSkge1xuICAgICsrdGhpcy5fdG9wO1xuICAgIGlmICh0aGlzLl9zdGFjay5sZW5ndGggPj0gdGhpcy5fdG9wICsgMSkgdGhpcy5fc3RhY2tbdGhpcy5fdG9wXSA9IGRhdGE7XG4gICAgZWxzZSB0aGlzLl9zdGFjay5wdXNoKGRhdGEpO1xuICAgIHJldHVybiB0aGlzLl9zdGFjaztcbiAgfSxcblxuICBwb3A6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLmlzRW1wdHkoKSkgcmV0dXJuO1xuICAgIGNvbnN0IHRvcCA9IHRoaXMuX3N0YWNrW3RoaXMuX3RvcF07XG5cbiAgICB0aGlzLl9zdGFja1t0aGlzLl90b3BdID0gdW5kZWZpbmVkO1xuICAgIC0tdGhpcy5fdG9wO1xuICAgIHJldHVybiB0b3A7XG4gIH0sXG5cbiAgdG9wOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhY2tbdGhpcy5fdG9wXTtcbiAgfSxcblxuICBpc0VtcHR5OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fdG9wID09PSAtMTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTdGFja0FycmF5O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLyoqXG4gKiBOb2RlIGZvciBsaW5rIGxpc3RcbiAqIEBwYXJhbSAgICAgICB7W3R5cGVdfSBkYXRhIFtkZXNjcmlwdGlvbl1cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBOb2RlKGRhdGEpIHtcbiAgdGhpcy5kYXRhID0gZGF0YTtcbn1cbi8qKlxuICogQ3JlYXRlIExpbmsgbGlzdFxuICogQHBhcmFtICAgICAgIHtbdHlwZV19IGRhdGEgW2Rlc2NyaXB0aW9uXVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFN0YWNrTGlua2VkTGlzdCgpIHt9XG4vKipcbiAqIFByaW50IExpbmsgbGlzdCBpbiByZWN1cnNpdmUgZmFzaGlvblxuICogQHBhcmFtICB7W3R5cGVdfSBub2RlIFtkZXNjcmlwdGlvbl1cbiAqIEByZXR1cm4ge1t0eXBlXX0gICAgICBbZGVzY3JpcHRpb25dXG4gKi9cblN0YWNrTGlua2VkTGlzdC5wcmludFJlY3Vyc2lvbiA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gbnVsbDtcbiAgcmV0dXJuIFN0YWNrTGlua2VkTGlzdC5wcmludFJlY3Vyc2lvbihub2RlLm5leHQpO1xufTtcblxuU3RhY2tMaW5rZWRMaXN0LnByb3RvdHlwZSA9IHtcbiAgLyoqXG4gICAqIFByaW50IGFsbCB2YWx1ZXMgaW4gYSBsaW5rbGlzdFxuICAgKiBAcmV0dXJuIHtbdHlwZV19IFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIHByaW50OiBmdW5jdGlvbigpIHtcbiAgICBsZXQgY3VyciA9IHRoaXMuaGVhZDtcblxuICAgIHdoaWxlIChjdXJyKSB7XG4gICAgICBjb25zb2xlLmxvZyhjdXJyLmRhdGEpO1xuICAgICAgY3VyciA9IGN1cnIubmV4dDtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIENvbnZlcnQgbGluayBsaXN0IHRvIGFycmF5XG4gICAqIEByZXR1cm4ge1t0eXBlXX0gW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgdG9BcnJheTogZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgYXJyYXkgPSBbXTtcbiAgICBsZXQgY3VyciA9IHRoaXMuaGVhZDtcblxuICAgIHdoaWxlIChjdXJyKSB7XG4gICAgICBhcnJheS5wdXNoKGN1cnIuZGF0YSk7XG4gICAgICBjdXJyID0gY3Vyci5uZXh0O1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEluc2VydCB2YWx1ZSBpbiBsaW5rbGlzdCBhdCBpbmRleCBvciBlbmRcbiAgICogQHBhcmFtICB7W3R5cGVdfSBkYXRhICBbZGVzY3JpcHRpb25dXG4gICAqIEBwYXJhbSAge1t0eXBlXX0gaW5kZXggW2Rlc2NyaXB0aW9uXVxuICAgKiBAcmV0dXJuIHtbdHlwZV19ICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIHB1c2g6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICBjb25zdCBuZXdOb2RlID0gbmV3IE5vZGUoZGF0YSk7XG5cbiAgICBuZXdOb2RlLm5leHQgPSB0aGlzLmhlYWQ7XG4gICAgdGhpcy5oZWFkID0gbmV3Tm9kZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICAvKipcbiAgICogUmVtb3ZlIGZpcnN0IG5vZGUgaW4gbGluayBsaXN0XG4gICAqIEByZXR1cm4ge1t0eXBlXX0gW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgcG9wOiBmdW5jdGlvbigpIHtcbiAgICBpZiAoIXRoaXMuaGVhZCkgcmV0dXJuIG51bGw7XG4gICAgY29uc3QgZmlyc3QgPSB0aGlzLmhlYWQ7XG5cbiAgICB0aGlzLmhlYWQgPSBmaXJzdC5uZXh0O1xuICAgIHJldHVybiBmaXJzdC5kYXRhO1xuICB9LFxuXG4gIHRvcDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaGVhZC5kYXRhO1xuICB9LFxuXG4gIGlzRW1wdHk6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAhdGhpcy5oZWFkO1xuICB9LFxuXG4gIC8qKlxuICAgKiBMaW5rTGlzdCByZXZlcnNhbCB1c2luZyBzdGFja3MgaXMgYW4gTyhOICsgTSkgdGltZSBhbmQgc3BhY2UgY29tcGxleGl0eVxuICAgKiBAcGFyYW0gIHtbdHlwZV19IGxpbmtMaXN0IFtkZXNjcmlwdGlvbl1cbiAgICogQHJldHVybiB7W3R5cGVdfSAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAqL1xuICByZXZlcnNlOiBmdW5jdGlvbigpIHtcbiAgICAvLyBDcmVhdGUgYSBzdGFjayB0byBzdG9yZSB0aGUgbGlua2xpc3QgdmFsdWVzXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgU3RhY2tMaW5rZWRMaXN0KCk7XG5cbiAgICAvLyBwdXNoIGFsbCBsaW5rIGxpc3QgdmFsdWVzIGluIHN0YWNrIGJ5IHNoaWZ0aW5nIHRoZSBmaXJzdCB2YWx1ZS5cbiAgICB3aGlsZSAodGhpcy5oZWFkKSBzdGFjay5wdXNoKHRoaXMuc2hpZnQoKSk7XG4gICAgLy8gcmUtaW5zZXJ0IGFsbCBvZiB0aGUgbGluayBsaXN0IHZhbHVlcyBieSBwb3BwaW5nIHRoZSBzdGFja1xuICAgIHdoaWxlICghc3RhY2suaXNFbXB0eSgpKSB0aGlzLmluc2VydChzdGFjay5wb3AoKSk7XG4gICAgLy8gcmV0dXJuIHRoZSBuZXcgc3RhY2tcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTdGFja0xpbmtlZExpc3Q7XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzb3J0aW5nOiByZXF1aXJlKCcuL3NvcnRpbmcnKVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNlbGVjdGlvblNvcnQ6IHJlcXVpcmUoJy4vc2VsZWN0aW9uJyksXG4gIGJ1YmJsZVNvcnQ6IHJlcXVpcmUoJy4vYnViYmxlJyksXG4gIGluc2VydGlvblNvcnQ6IHJlcXVpcmUoJy4vaW5zZXJ0aW9uJyksXG4gIG1lcmdlU29ydDogcmVxdWlyZSgnLi9tZXJnZScpLFxuICBxdWlja1NvcnQ6IHJlcXVpcmUoJy4vcXVpY2snKVxufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8qKlxuICogU2VsZWN0aW9uIFNvcnRcbiAqXG4gKiBUaW1lIGNvbXBsZXhpdHkgaXMgTyhuXjIpXG4gKiBAcGFyYW0gIHtbTnVtYmVyXX0gYXJyYXkgQXJyYXkgb2YgaW50ZWdlcnMgdG8gc29ydFxuICogQHJldHVybiB7W051bWJlcl19IGFycmF5IEFycmF5IG9mIGludGVnZXJzIHRvIHNvcnRlZFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoIC0gMTsgKytpKSB7XG4gICAgbGV0IG1pbiA9IGk7XG5cbiAgICBmb3IgKGxldCBqID0gaSArIDE7IGogPCBhcnJheS5sZW5ndGg7ICsraikge1xuICAgICAgaWYgKGFycmF5W21pbl0gPCBhcnJheVtqXSkgbWluID0gajtcbiAgICB9XG4gICAgbGV0IHRlbXAgPSBhcnJheVtpXTtcblxuICAgIGFycmF5W2ldID0gYXJyYXlbbWluXTtcbiAgICBhcnJheVttaW5dID0gdGVtcDtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLyoqXG4gKiBCdWJibGUgU29ydFxuICpcbiAqIFRpbWUgY29tcGxleGl0eVxuICogQmVzdCBDYXNlOiBpcyBPKG4pXG4gKiBBdmVyYWdlIENhc2U6IGlzIE8obl4yKVxuICogV29yc3QgQ2FzZTogaXMgTyhuXjIpXG4gKlxuICogQHBhcmFtICB7W051bWJlcl19IGFycmF5IEFycmF5IG9mIGludGVnZXJzIHRvIHNvcnRcbiAqIEByZXR1cm4ge1tOdW1iZXJdfSBhcnJheSBBcnJheSBvZiBpbnRlZ2VycyB0byBzb3J0ZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhcnJheSkge1xuICBmb3IgKGxldCB0ID0gYXJyYXkubGVuZ3RoIC0gMTsgdCA+PSAwOyAtLXQpIHtcbiAgICBsZXQgc3dhcHBlZCA9IGZhbHNlO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0IC0gMTsgKytpKSB7XG4gICAgICBpZiAoYXJyYXlbaV0gPiBhcnJheVtpICsgMV0pIHtcbiAgICAgICAgY29uc3QgdGVtcCA9IGFycmF5W2ldO1xuXG4gICAgICAgIGFycmF5W2ldID0gYXJyYXlbaSArIDFdO1xuICAgICAgICBhcnJheVtpICsgMV0gPSB0ZW1wO1xuICAgICAgICBzd2FwcGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICghc3dhcHBlZCkgYnJlYWs7IC8vIElmIHN3YXAgbmV2ZXIgaGFwcGVucywgQnJlYWsgdGhlIGxvb3AuXG4gICAgfVxuICB9XG4gIHJldHVybiBhcnJheTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vKipcbiAqIEluc2VydGlvbiBTb3J0XG4gKlxuICogVGltZSBjb21wbGV4aXR5XG4gKiBCZXN0IENhc2U6IGlzIE8obilcbiAqIEF2ZXJhZ2UgQ2FzZTogaXMgTyhuXjIpXG4gKiBXb3JzdCBDYXNlOiBpcyBPKG5eMilcbiAqXG4gKiBAcGFyYW0gIHtbTnVtYmVyXX0gYXJyYXkgQXJyYXkgb2YgaW50ZWdlcnMgdG8gc29ydFxuICogQHJldHVybiB7W051bWJlcl19IGFycmF5IEFycmF5IG9mIGludGVnZXJzIHRvIHNvcnRlZFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gIGZvciAobGV0IGkgPSAxOyBpIDwgYXJyYXkubGVuZ3RoOyArK2kpIHtcbiAgICBsZXQgdmFsID0gYXJyYXlbaV07XG4gICAgbGV0IGggPSBpO1xuXG4gICAgd2hpbGUgKGggPiAwICYmIGFycmF5W2ggLSAxXSA+IHZhbCkge1xuICAgICAgYXJyYXlbaF0gPSBhcnJheVtoIC0gMV07XG4gICAgICAtLWg7XG4gICAgfVxuICAgIGFycmF5W2hdID0gdmFsO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vKipcbiAqIE1lcmdlIFNvcnRcbiAqXG4gKiBUaW1lIGNvbXBsZXhpdHkgTyhuIGxvZyBuKVxuICogU3BhY2UgY29tcGxleGl0eSBPKG4pXG4gKlxuICogQHBhcmFtICB7W051bWJlcl19IGFycmF5IEFycmF5IG9mIGludGVnZXJzIHRvIHNvcnRcbiAqIEByZXR1cm4ge1tOdW1iZXJdfSBhcnJheSBBcnJheSBvZiBpbnRlZ2VycyB0byBzb3J0ZWRcbiAqL1xuZnVuY3Rpb24gbWVyZ2VTb3J0KGFycmF5KSB7XG4gIGlmIChhcnJheS5sZW5ndGggPD0gMSkgcmV0dXJuIGFycmF5O1xuICBjb25zdCBtaWQgPSBNYXRoLmZsb29yKGFycmF5Lmxlbmd0aCAvIDIpOyAvLyBEZXRlcm1pbmUgbWlkIHBvaW50IG9mIGFycmF5XG4gIGNvbnN0IGxlZnQgPSBhcnJheS5zbGljZSgwLCBtaWQpOyAvLyBzcGxpdCBhcnJheSBpbiB0byAyIGJ5IHRoZSBtaWQgcG9pbnRcbiAgY29uc3QgcmlnaHQgPSBhcnJheS5zbGljZShtaWQpO1xuICAvLyBmdW5jdGlvbiB0byBzb3J0IGFuZCBtZXJnZSAyIGFycmF5c1xuICBjb25zdCBzb3J0QW5kTWVyZ2UgPSAobGVmdCwgcmlnaHQpID0+IHtcbiAgICBsZXQgc29ydGVkID0gW107IC8vIGZpbmFsIHNvcnRlZCBhcnJheVxuICAgIGxldCBsID0gMDsgLy8gY3VycmVudCBzY2FubmVkIGluZGV4ZXMgb2YgbGVmdCBhbmQgcmlnaHQgYXJyYXlzXG4gICAgbGV0IHIgPSAwO1xuXG4gICAgd2hpbGUgKGwgPCBsZWZ0Lmxlbmd0aCAmJiByIDwgcmlnaHQubGVuZ3RoKSB7IC8vIHNjYW4gdmFsdWVzIGluIGFycmF5c1xuICAgICAgaWYgKGxlZnRbbF0gPCByaWdodFtyXSkgeyAvLyBpZiBsZWZ0IGlzIHNtYWxsZXIsIHB1c2ggdG8gYXJyYXkgYW5kIGluY3JlbWVudCBsZWZ0IGluZGV4XG4gICAgICAgIHNvcnRlZC5wdXNoKGxlZnRbbF0pO1xuICAgICAgICArK2w7XG4gICAgICB9IGVsc2UgeyAvLyBwdXNoIHJpZ2h0IHZhbHVlIHRvIGFycmF5IGFuZCBpbmNyZW1lbnQgcmlnaHQgaW5kZXhcbiAgICAgICAgc29ydGVkLnB1c2gocmlnaHRbcl0pO1xuICAgICAgICArK3I7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIEFwcGVuZCByZW1haW5pbmcgdmFsdWVzXG4gICAgcmV0dXJuIHNvcnRlZC5jb25jYXQobGVmdC5zbGljZShsKSkuY29uY2F0KHJpZ2h0LnNsaWNlKHIpKTtcbiAgfTtcblxuICAvLyByZXR1cm4gbWVyZ2VkIGFycmF5IGluIHJlY3Vyc2lvblxuICByZXR1cm4gc29ydEFuZE1lcmdlKG1lcmdlU29ydChsZWZ0KSwgbWVyZ2VTb3J0KHJpZ2h0KSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IG1lcmdlU29ydDtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhcnJheSkge1xuICBjb25zdCBzd2FwID0gKGEsIGIpID0+IHtcbiAgICBjb25zdCB0ID0gYTtcblxuICAgIGEgPSBiO1xuICAgIGIgPSB0O1xuICB9O1xuXG4gIGNvbnN0IHBhcnRpdGlvbiA9IChhcnJheSwgc3RhcnQsIGVuZCkgPT4ge1xuICAgIGNvbnN0IHBpdm90ID0gYXJyYXlbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYXJyYXkubGVuZ3RoKV07XG4gICAgbGV0IGluZGV4ID0gc3RhcnQ7XG5cbiAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBlbmQgLSAxOyArK2kpIHtcbiAgICAgIGlmIChhcnJheVtpXSA8PSBwaXZvdCkge1xuICAgICAgICBzd2FwKGFycmF5W2ldLCBhcnJheVtpbmRleF0pO1xuICAgICAgICBpbmRleCA9IGluZGV4ICsgMTtcbiAgICAgIH1cbiAgICB9XG4gICAgc3dhcChhcnJheVtpbmRleF0sIGFycmF5W2VuZF0pO1xuICAgIHJldHVybiBpbmRleDtcbiAgfTtcblxuICBjb25zdCBxdWlja1NvcnQgPSAoYXJyYXksIHN0YXJ0LCBlbmQpID0+IHtcbiAgICBpZiAoc3RhcnQgPCBlbmQpIHtcbiAgICAgIGNvbnN0IHAgPSBwYXJ0aXRpb24oYXJyYXksIHN0YXJ0LCBlbmQpO1xuXG4gICAgICBxdWlja1NvcnQoYXJyYXksIHN0YXJ0LCBwKTtcbiAgICAgIHF1aWNrU29ydChhcnJheSwgcCArIDEsIGVuZCk7XG4gICAgfVxuICB9O1xuXG4gIHF1aWNrU29ydChhcnJheSwgMCwgYXJyYXkubGVuZ3RoIC0gMSk7XG4gIHJldHVybiBhcnJheTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9